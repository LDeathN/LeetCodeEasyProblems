#First Problem
class Solution(object):
    def hasPathSum(self, root, targetSum):
        
        def dfs(node, cur_sum):
            if not node:
                return False
            
            cur_sum += node.val

            if not node.left and not node.right:
                return cur_sum == targetSum

            return (dfs(node.left, cur_sum) or dfs(node.right, cur_sum))  

        return dfs(root, 0)  


#Second Problem
class Solution(object):
    def generate(self, numRows):

        res = [[1]]
        
        for i in range(numRows - 1):
            temp = [0] + res[-1] + [0]
            row = []
            for j in range(len(res[-1]) + 1):
                row.append(temp[j] + temp[j + 1])
            res.append(row)
        return res


#Third Problem
class Solution(object):
    def getRow(self, rowIndex):
        res = [[1]]
        
        for i in range(rowIndex):
            temp = [0] + res[-1] + [0]
            row = []
            for j in range(len(res[-1]) + 1):
                row.append(temp[j] + temp[j + 1])
            res.append(row)
        return res[-1]
