#First Problem
class Solution(object):
    def isPathCrossing(self, path):
        cords = [(0, 0)]
        current = (0, 0)
        for letter in path:
            if letter == "N":
                x, y = current
                y += 1
                current = (x, y)
            elif letter == "S":
                x, y = current
                y -= 1
                current = (x, y)
            elif letter == "E":
                x, y = current
                x += 1
                current = (x, y)
            elif letter == "W":
                x, y = current
                x -= 1
                current = (x, y)
                
            if current in cords:
                return True
            cords.append(current)

        return False



#Second Problem
class Solution(object):
    def canMakeArithmeticProgression(self, arr):
        arr = sorted(arr)
        diff = abs(arr[0] - arr[1])
        for i in range(len(arr) - 1):
            if arr[i] + diff != arr[i + 1]:
                return False
        return True



#Third Problem
class Solution(object):
    def reformatDate(self, date):
        day, month, year = date.split()

        month_map = {
            "Jan": "01", "Feb": "02", "Mar": "03", "Apr": "04",
            "May": "05", "Jun": "06", "Jul": "07", "Aug": "08",
            "Sep": "09", "Oct": "10", "Nov": "11", "Dec": "12"
        }

        month = month_map[month]

        day = day[:-2] 
        day = day.zfill(2) 

        reformatted_date = "{}-{}-{}".format(year, month, day)
        
        return reformatted_date




