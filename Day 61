#First Problem
class Solution(object):
    def countLargestGroup(self, n):
        from collections import defaultdict

        def digit_sum(num):
            return sum(int(digit) for digit in str(num))
        
        groups = defaultdict(int)
        
        for i in range(1, n + 1):
            sum_of_digits = digit_sum(i)
            groups[sum_of_digits] += 1
        
        max_size = max(groups.values())
        largest_groups_count = sum(1 for count in groups.values() if count == max_size)
        
        return largest_groups_count



#Second Problem
class Solution(object):
    def minSubsequence(self, nums):
        nums.sort(reverse=True)

        total_sum = sum(nums)
        subseq_sum = 0
        subsequence = []

        for num in nums:
            subsequence.append(num)
            subseq_sum += num
            total_sum -= num
            if subseq_sum > total_sum:
                break

        return subsequence



#Third Problem
SELECT u.name, COALESCE(SUM(r.distance), 0) as travelled_distance
FROM Users as u
LEFT JOIN Rides as r
ON u.id = r.user_id
GROUP BY u.id, u.name
ORDER BY travelled_distance DESC, u.name ASC;



#Fourth Problem
class Solution(object):
    def stringMatching(self, words):
        result = []
        for i in range(len(words)):
            for j in range(len(words)):
                if words[i] in words[j] and i != j:
                    result.append(words[i])
        result = set(result)
        return result




