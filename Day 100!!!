#First Problem
class Solution(object):
    def strongPasswordCheckerII(self, password):
        if len(password) < 8:
            return False

        has_lower = False
        has_upper = False
        has_digit = False
        has_special = False
        special_characters = "!@#$%^&*()-+"

        for i in range(len(password)):
            if password[i].islower():
                has_lower = True
            if password[i].isupper():
                has_upper = True
            if password[i].isdigit():
                has_digit = True
            if password[i] in special_characters:
                has_special = True
            if i > 0 and password[i] == password[i - 1]:
                return False

        return has_lower and has_upper and has_digit and has_special



#Second Problem
class Solution(object):
    def calculateTax(self, brackets, income):
        tax = 0.0
        previous_upper = 0
        
        for upper, percent in brackets:
            if income <= 0:
                break
            taxable_amount = min(income, upper - previous_upper)
            tax += taxable_amount * (percent / 100.0)
            income -= taxable_amount
            previous_upper = upper
            
        return tax



#Third Problem
class Solution(object):
    def greatestLetter(self, s):
        lowercase_set = set()
        uppercase_set = set()
        
        for char in s:
            if char.islower():
                lowercase_set.add(char)
            elif char.isupper():
                uppercase_set.add(char)
        
        greatest = ""
        for char in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            if char in uppercase_set and char.lower() in lowercase_set:
                greatest = char
                
        return greatest



#Fourth Problem
class Solution(object):
    def countAsterisks(self, s):
        count = 0
        between_bars = False
        
        for char in s:
            if char == '|':
                between_bars = not between_bars
            elif char == '*' and not between_bars:
                count += 1
        
        return count




