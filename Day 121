#First Problem (2744)
class Solution(object):
    def maximumNumberOfStringPairs(self, words):
        word_map = {}
        pairs = 0
        
        for word in words:
            reversed_word = word[::-1]
            if reversed_word in word_map and word_map[reversed_word] > 0:
                pairs += 1
                word_map[reversed_word] -= 1  
            else:
                word_map[word] = word_map.get(word, 0) + 1  
        
        return pairs



#Second Problem (2748)
class Solution(object):
    def countBeautifulPairs(self, nums):
        def first_digit(num):
            while num >= 10:
                num //= 10
            return num

        def gcd(a, b):
            while b != 0:
                a, b = b, a % b
            return a
        
        count = 0
        n = len(nums)
        
        for i in range(n):
            for j in range(i + 1, n):
                first = first_digit(nums[i])
                last = nums[j] % 10
                if gcd(first, last) == 1:
                    count += 1
        
        return count



#Third Problem (2760)
class Solution(object):
    def longestAlternatingSubarray(self, nums, threshold):
        max_length = 0
        l = 0
        
        while l < len(nums):
            if nums[l] % 2 != 0 or nums[l] > threshold:
                l += 1
                continue
            
            r = l
            current_length = 0

            while r < len(nums):
                if nums[r] > threshold or (r > l and nums[r] % 2 == nums[r - 1] % 2):
                    break
                current_length += 1
                r += 1

            max_length = max(max_length, current_length)

            l += 1
        
        return max_length



#Fourth Problem (2765)
class Solution(object):
    def alternatingSubarray(self, nums):
        max_len = -1

        for i in range(len(nums) - 1):
            if nums[i + 1] == nums[i] + 1:  
                current_len = 2
                j = i + 1
                while j + 1 < len(nums) and nums[j + 1] == nums[j] + (-1)**(current_len - 1):
                    current_len += 1
                    j += 1
                max_len = max(max_len, current_len) 
        
        return max_len




