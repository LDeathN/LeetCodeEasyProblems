#First Problem
class Solution(object):
    class Solution(object):
    def intersection(self, nums):
        counting = {}
        result = []
        for i in range(len(nums)):
            current = set(nums[i])
            for num in current:
                if num not in counting:
                    counting[num] = 0
                counting[num] += 1
        
        for key, value in counting.items():
            if value == len(nums):
                result.append(key)

        return sorted(result)



#Second Problem
class Solution(object):
    def countPrefixes(self, words, s):
        count = 0
        for word in words:
            if word == s[:len(word)]:
                count += 1
        
        return count



#Third Problem
class Solution(object):
    def removeDigit(self, number, digit):
        numbers = []
        for i in range(len(number)):
            if number[i] == digit:
                current = number[:i] + number[i + 1:]
                numbers.append(int(current))
        
        return str(max(numbers))



#Fourth Problem
class Solution(object):
    def largestGoodInteger(self, num):
        result = ''
        wanted = ['000', '111', '222', '333', '444', '555', '666', '777', '888', '999']
        for number in wanted:
            if number in num:
                result = number

        return result




