#First Problem (2839)
class Solution(object):
    def canBeEqual(self, s1, s2):
        if sorted([s1[0], s1[2]]) != sorted([s2[0], s2[2]]):
            return False
        if sorted([s1[1], s1[3]]) != sorted([s2[1], s2[3]]):
            return False
        return True



#Second Problem (2843)
class Solution(object):
    def countSymmetricIntegers(self, low, high):
        count = 0

        for num in range(low, high + 1):
            str_num = str(num)
            n = len(str_num)

            if n % 2 != 0:
                continue

            mid = n // 2
            first_half = str_num[:mid]
            second_half = str_num[mid:]

            if sum(map(int, first_half)) == sum(map(int, second_half)):
                count += 1

        return count




