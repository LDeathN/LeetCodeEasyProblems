#First Problem
class Solution(object):
    def findFinalValue(self, nums, original):
        while True:
            if original in nums:
                original *= 2
            else:
                break

        return original



#Second Problem
class Solution(object):
    def minimumSum(self, num):
        num = sorted(str(num))
        total = 0
        while num:
            current = ""
            current += num.pop(0)
            current += num.pop()
            current = int(current)
            total += current
        
        return total



#Third Problem
class Solution(object):
    def sortEvenOdd(self, nums):
        odd_indices = [nums[i] for i in range(1, len(nums), 2)]
        even_indices = [nums[i] for i in range(0, len(nums), 2)]

        odd_indices.sort(reverse=True) 
        even_indices.sort()            

        odd_index = 0
        even_index = 0
        for i in range(len(nums)):
            if i % 2 == 0:
                nums[i] = even_indices[even_index]
                even_index += 1
            else:
                nums[i] = odd_indices[odd_index]
                odd_index += 1
        
        return nums



#Fourth Problem
class Solution(object):
    def countOperations(self, num1, num2):
        count = 0
        while num1 > 0 and num2 > 0:
            if num1 > num2:
                num1 -= num2
            else:
                num2 -= num1
            count += 1
        return count



#Fifth Problem
class Solution(object):
    def countPairs(self, nums, k):
        count = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[i] == nums[j] and (i * j) % k == 0:
                    count += 1
        return count


End of Day 94
