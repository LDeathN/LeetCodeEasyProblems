#First Problem
class Solution(object):
    def largestInteger(self, num):
        digits = [int(d) for d in str(num)]

        odd_digits = [d for d in digits if d % 2 != 0]
        even_digits = [d for d in digits if d % 2 == 0]

        odd_digits.sort(reverse=True)
        even_digits.sort(reverse=True)

        result = []
        for d in digits:
            if d % 2 == 0:
                result.append(even_digits.pop(0))
            else:
                result.append(odd_digits.pop(0))

        return int("".join(map(str, result)))



#Second Problem
class Solution(object):
    def sum(self, num1, num2):
        return num1 + num2



#Third Problem
class Solution(object):
    def checkTree(self, root):
        return root.val == root.left.val + root.right.val



#Fourth Problem
class Solution(object):
    def findClosestNumber(self, nums):
        closest = None
    
        for num in nums:
            if closest is None or abs(num) < abs(closest) or (abs(num) == abs(closest) and num > closest):
                closest = num
        
        return closest



#Fifth Problem
class Solution(object):
    def digitSum(self, s, k):
        def digit_sum(s):
            return str(sum(int(char) for char in s))

        def process_string(s, k):
            while len(s) > k:
                new_s = ""
                for i in range(0, len(s), k):
                    group = s[i:i+k]
                    new_s += digit_sum(group)
                s = new_s
            return s

        return process_string(s, k)


End of Day 97
