#First Problem (77)
class Solution(object):
    def combine(self, n, k):
        def backtrack(start, current_comb):
            if len(current_comb) == k:
                result.append(current_comb[:])  
                return

            for i in range(start, n + 1):
                current_comb.append(i)           
                backtrack(i + 1, current_comb)  
                current_comb.pop()              
        
        result = []
        backtrack(1, [])
        return result



#Second Problem (78)
class Solution(object):
    def subsets(self, nums):
        def backtrack(start, current_subset):
            result.append(current_subset[:])

            for i in range(start, len(nums)):
                current_subset.append(nums[i])
                backtrack(i + 1, current_subset)
                current_subset.pop()

        result = []
        backtrack(0, [])
        return result



#Third Problem (79)
class Solution(object):
    def exist(self, board, word):
        rows, cols = len(board), len(board[0])

        def backtrack(r, c, index):
            if index == len(word):
                return True

            if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[index]:
                return False

            temp = board[r][c]
            board[r][c] = '#'

            found = (backtrack(r + 1, c, index + 1) or
                    backtrack(r - 1, c, index + 1) or
                    backtrack(r, c + 1, index + 1) or
                    backtrack(r, c - 1, index + 1))

            board[r][c] = temp
            
            return found

        for i in range(rows):
            for j in range(cols):
                if backtrack(i, j, 0):
                    return True

        return False



#Fourth Problem (80)
class Solution(object):
    def removeDuplicates(self, nums):
        if len(nums) <= 2:
            return len(nums)  
        
        insert_pos = 2  
        
        for i in range(2, len(nums)):
            if nums[i] != nums[insert_pos - 2]:
                nums[insert_pos] = nums[i]
                insert_pos += 1
        
        return insert_pos



#Fifth Problem (81)
class Solution(object):
    def search(self, nums, target):
        left, right = 0, len(nums) - 1
    
        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                return True

            if nums[left] == nums[mid] == nums[right]:
                left += 1
                right -= 1
            elif nums[left] <= nums[mid]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        
        return False


End of Day 148
