#First Problem (77)
class Solution(object):
    def combine(self, n, k):
        def backtrack(start, current_comb):
            if len(current_comb) == k:
                result.append(current_comb[:])  
                return

            for i in range(start, n + 1):
                current_comb.append(i)           
                backtrack(i + 1, current_comb)  
                current_comb.pop()              
        
        result = []
        backtrack(1, [])
        return result



#Second Problem (78)
class Solution(object):
    def subsets(self, nums):
        def backtrack(start, current_subset):
            result.append(current_subset[:])

            for i in range(start, len(nums)):
                current_subset.append(nums[i])
                backtrack(i + 1, current_subset)
                current_subset.pop()

        result = []
        backtrack(0, [])
        return result




