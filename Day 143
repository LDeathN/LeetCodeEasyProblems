#First Problem (38)
class Solution(object):
    def countAndSay(self, n):
        if n == 1:
            return "1"

        result = "1"

        for _ in range(2, n + 1):
            current = result
            result = ""
            i = 0

            while i < len(current):
                count = 1
                while i + 1 < len(current) and current[i] == current[i + 1]:
                    i += 1
                    count += 1
                result += str(count) + current[i]
                i += 1
        
        return result



#Second Problem (39)
class Solution(object):
    def combinationSum(self, candidates, target):
        def backtrack(remaining, start, path, result):
            if remaining == 0:
                result.append(list(path))
                return
            elif remaining < 0:
                return

            for i in range(start, len(candidates)):
                path.append(candidates[i])
                backtrack(remaining - candidates[i], i, path, result)
                path.pop()
        
        result = []
        backtrack(target, 0, [], result)
        return result



#Third Problem (40)
class Solution(object):
    def combinationSum2(self, candidates, target):
        def backtrack(start, target, path, result):
            if target == 0:
                result.append(list(path))
                return
            if target < 0:
                return
            
            for i in range(start, len(candidates)):
                if i > start and candidates[i] == candidates[i - 1]:
                    continue

                path.append(candidates[i])
                backtrack(i + 1, target - candidates[i], path, result)
                path.pop()
        
        candidates.sort()  
        result = []
        backtrack(0, target, [], result)
        return result



#Fourth Problem (43)
class Solution(object):
    def multiply(self, num1, num2):
        if num1 == "0" or num2 == "0":
            return "0"

        result = [0] * (len(num1) + len(num2))
        
        num1, num2 = num1[::-1], num2[::-1]

        for i in range(len(num1)):
            for j in range(len(num2)):
                mul = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))
                result[i + j] += mul
                result[i + j + 1] += result[i + j] // 10
                result[i + j] %= 10

        while len(result) > 1 and result[-1] == 0:
            result.pop()

        return ''.join(map(str, result[::-1]))




