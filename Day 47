#First Problem
class Solution(object):
    def canThreePartsEqualSum(self, arr):
        total_sum = sum(arr)
        if total_sum % 3 != 0:
            return False

        target = total_sum // 3
        current_sum, count = 0, 0

        for num in arr:
            current_sum += num
            if current_sum == target:
                count += 1
                current_sum = 0

        return count >= 3



#Second Problem
class Solution(object):
    def prefixesDivBy5(self, nums):
        result = []
        current_value = 0
        
        for bit in nums:
            current_value = (current_value << 1) + bit  
            result.append(current_value % 5 == 0) 
        
        return result



#Third Problem
class Solution(object):
    def removeOuterParentheses(self, s):
        result = []
        balance = 0
        start = 0

        for i, char in enumerate(s):
            if char == '(':
                balance += 1
            else:
                balance -= 1

            if balance == 0:
                result.append(s[start + 1:i])
                start = i + 1
        
        return ''.join(result)



#Fourth Problem
class Solution(object):
    def sumRootToLeaf(self, root):
        def dfs(node, current_value):
            if not node:
                return 0
            
            current_value = (current_value << 1) | node.val

            if not node.left and not node.right:
                return current_value

            left_sum = dfs(node.left, current_value)
            right_sum = dfs(node.right, current_value)
            
            return left_sum + right_sum
        
        return dfs(root, 0)



#Fifth Problem
class Solution(object):
    def divisorGame(self, n):
        return n % 2 == 0



End of Day 47
