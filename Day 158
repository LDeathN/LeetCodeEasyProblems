#First Problem (172)
class Solution(object):
    def trailingZeroes(self, n):
        count = 0
        while n >= 5:
            n //= 5  
            count += n
        return count



#Second Problem (173)
class BSTIterator(object):

    def __init__(self, root):
        self.stack = []
        self._leftmost_inorder(root)
    
    def _leftmost_inorder(self, node):
        while node:
            self.stack.append(node)
            node = node.left

    def next(self):
        topmost_node = self.stack.pop()
        
        if topmost_node.right:
            self._leftmost_inorder(topmost_node.right)
        
        return topmost_node.val
        

    def hasNext(self):
        return len(self.stack) > 0



#Third Problem (176)
SELECT (
    SELECT DISTINCT salary
    FROM Employee
    ORDER BY salary DESC
    LIMIT 1 OFFSET 1
) AS SecondHighestSalary;



#Fourth Problem (178)
SELECT score, 
       DENSE_RANK() OVER (ORDER BY score DESC) AS `rank`
FROM Scores
ORDER BY score DESC;



#Fifth Problem (179)
class Solution(object):
    from functools import cmp_to_key
    def largestNumber(self, nums):
        nums_str = list(map(str, nums))
    
        def compare(a, b):
            return (1 if a + b < b + a else -1)
        
        nums_str.sort(key=cmp_to_key(compare))
        
        result = ''.join(nums_str)

        return result if result[0] != '0' else '0'


End of Day 158
