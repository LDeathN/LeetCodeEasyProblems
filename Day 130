#First Problem (3019)
class Solution(object):
    def countKeyChanges(self, s):
        change_count = 0
        previous_group = None
        
        for char in s:
            current_group = char.lower()

            if previous_group is not None and current_group != previous_group:
                change_count += 1

            previous_group = current_group

        return change_count



#Second Problem (3024)
class Solution(object):
    def triangleType(self, nums):
        if nums[0] + nums[1] > nums[2] and nums[1] + nums[2] > nums[0] and nums[0] + nums[2] > nums[1]:
            if nums[0] == nums[1] == nums[2]:
                return "equilateral"
            elif nums[0] == nums[1] or nums[0] == nums[2] or nums[1] == nums[2]:
                return "isosceles"
            else:
                return "scalene"
        else:
            return "none"



#Third Problem (3028)
class Solution(object):
    def returnToBoundaryCount(self, nums):
        position = 0

        count = 0

        for move in nums:
            position += move

            if position == 0:
                count += 1

        return count



#Fourth Problem (3033)
class Solution(object):
    def modifiedMatrix(self, matrix):
        m, n = len(matrix), len(matrix[0])

        max_in_col = [-float('inf')] * n 
        
        for j in range(n):
            for i in range(m):
                max_in_col[j] = max(max_in_col[j], matrix[i][j])

        for i in range(m):
            for j in range(n):
                if matrix[i][j] == -1:
                    matrix[i][j] = max_in_col[j]
        
        return matrix




