#First Problem (2956)
class Solution(object):
    def findIntersectionValues(self, nums1, nums2):
        result = [0, 0]
        for num in nums1:
            if num in nums2:
                result[0] += 1
        for num in nums2:
            if num in nums1:
                result[1] += 1
        return result



#Second Problem (2960)
class Solution(object):
    def countTestedDevices(self, batteryPercentages):
        n = len(batteryPercentages)
        tested_count = 0

        for i in range(n):
            if batteryPercentages[i] > 0:
                tested_count += 1

                for j in range(i + 1, n):
                    batteryPercentages[j] = max(0, batteryPercentages[j] - 1)

        return tested_count



#Third Problem (2965)
class Solution(object):
    def findMissingAndRepeatedValues(self, grid):
        result = [0, 0]
        seen = []
        nums = [(i + 1) for i in range(len(grid) * len(grid))]
        for i in range(1, len(grid) + 1):
            for j in range(1, len(grid) + 1):
                if grid[i - 1][j - 1] in seen:
                    result[0] = grid[i - 1][j - 1]
                seen.append(grid[i - 1][j - 1])

        for num in nums:
            if num not in seen:
                    result[1] = num
        return result



#Fourth Problem (2974)
class Solution(object):
    def numberGame(self, nums):
        nums.sort()

        arr = []
        i = 0
        n = len(nums)

        while i < n:
            alice_removed = nums[i]
            i += 1

            bob_removed = nums[i]
            i += 1

            arr.append(bob_removed)
            arr.append(alice_removed)
        
        return arr



#Fifth Problem (2980)
class Solution(object):
    def hasTrailingZeros(self, nums):
        even_count = 0

        for num in nums:
            if num % 2 == 0:
                even_count += 1

        return even_count >= 2


End of Day 128
