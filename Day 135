#First Problem (3174)
class Solution(object):
    def clearDigits(self, s):
        s = list(s)

        while any(c.isdigit() for c in s):
            for i in range(len(s)):
                if s[i].isdigit():
                    for j in range(i - 1, -1, -1):
                        if s[j].isalpha():
                            s.pop(j)
                            break
                    s.pop(i - 1) 
                    break

        return "".join(s)



#Second Problem (3178)
class Solution(object):
    def numberOfChild(self, n, k):
        position = 0
        direction = 1

        for _ in range(k):
            position += direction

            if position == 0 or position == n - 1:
                direction *= -1 

        return position



#Third Problem (3184)
class Solution(object):
    def countCompleteDayPairs(self, hours):
        count = 0
        remainder_count = [0] * 24

        for hour in hours:
            remainder = hour % 24
            complement = (24 - remainder) % 24

            count += remainder_count[complement]

            remainder_count[remainder] += 1

        return count



#Fourth Problem (3190)
class Solution(object):
    def minimumOperations(self, nums):
        operations = 0

        for num in nums:
            remainder = num % 3

            if remainder != 0:
                operations += 1
        
        return operations




