#First Problem (130)
class Solution(object):
    def solve(self, board):
        if not board or not board[0]:
            return
        
        m, n = len(board), len(board[0])
        
        def dfs(x, y):
            if x < 0 or y < 0 or x >= m or y >= n or board[x][y] != 'O':
                return
            board[x][y] = '#'
            dfs(x + 1, y)
            dfs(x - 1, y)
            dfs(x, y + 1)
            dfs(x, y - 1)

        for i in range(m):
            if board[i][0] == 'O':  
                dfs(i, 0)
            if board[i][n - 1] == 'O':  
                dfs(i, n - 1)
        
        for j in range(n):
            if board[0][j] == 'O':  
                dfs(0, j)
            if board[m - 1][j] == 'O': 
                dfs(m - 1, j)
        
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'O':
                    board[i][j] = 'X'  
                elif board[i][j] == '#':
                    board[i][j] = 'O' 



#Second Problem (131)
class Solution(object):
    def partition(self, s):
        res = []

        def is_palindrome(sub):
            return sub == sub[::-1]

        def backtrack(start, path):
            if start == len(s):  
                res.append(path[:]) 
                return

            for end in range(start + 1, len(s) + 1):
                substr = s[start:end]
                if is_palindrome(substr): 
                    path.append(substr)  
                    backtrack(end, path)  
                    path.pop()  

        backtrack(0, [])
        
        return res



#Third Problem (133)
class Solution(object):
    def cloneGraph(self, node):
        if not node:
            return None

        clones = {}

        def dfs(node):
            if node in clones:
                return clones[node]

            clone = Node(node.val)
            clones[node] = clone
        
            for neighbor in node.neighbors:
                clone.neighbors.append(dfs(neighbor))
            
            return clone
        
        return dfs(node)



#Fourth Problem (134)
class Solution(object):
    def canCompleteCircuit(self, gas, cost):
        n = len(gas)
        total_tank = 0
        current_tank = 0
        start_station = 0
        
        for i in range(n):
            total_tank += gas[i] - cost[i]
            current_tank += gas[i] - cost[i]
            
            if current_tank < 0:
                start_station = i + 1
                current_tank = 0
        
        return start_station if total_tank >= 0 else -1



#Fifth Problem (137)
class Solution(object):
    def singleNumber(self, nums):
        result = 0

        for i in range(32):
            bit_sum = 0
            for num in nums:
                bit_sum += (num >> i) & 1

            if bit_sum % 3 != 0:
                result |= (1 << i)

        if result >= 2**31:
            result -= 2**32
        
        return result


End of Day 154
