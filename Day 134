#First Problem (3136)
class Solution(object):
    def isValid(self, word):
        if len(word) < 3:
            return False

        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
        has_vowel = False
        has_consonant = False

        for char in word:
            if not char.isalnum():
                return False

            if char.isalpha():
                if char in vowels:
                    has_vowel = True
                else:
                    has_consonant = True

        return has_vowel and has_consonant



#Second Problem (3142)
class Solution(object):
    def satisfiesConditions(self, grid):
        m, n = len(grid), len(grid[0])
        
        for i in range(m):
            for j in range(n):
                if i + 1 < m and grid[i][j] != grid[i + 1][j]:
                    return False

                if j + 1 < n and grid[i][j] == grid[i][j + 1]:
                    return False
                    
        return True



#Third Problem (3146)
class Solution(object):
    def findPermutationDifference(self, s, t):
        index_s = {char: i for i, char in enumerate(s)}
        index_t = {char: i for i, char in enumerate(t)}
        
        difference = 0
        for char in s:
            difference += abs(index_s[char] - index_t[char])
        
        return difference



#Fourth Problem (3151)
class Solution(object):
    def isArraySpecial(self, nums):
        if len(nums) == 1:
            return True

        for i in range(len(nums) - 1):
            if nums[i] % 2 == nums[i + 1] % 2:
                return False

        return True




