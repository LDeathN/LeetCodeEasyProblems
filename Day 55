#First Problem
class Solution(object):
    def shiftGrid(self, grid, k):
        m, n = len(grid), len(grid[0])
        total_elements = m * n

        flattened_grid = [grid[i // n][i % n] for i in range(total_elements)]

        k = k % total_elements 
        shifted_grid = flattened_grid[-k:] + flattened_grid[:-k]

        new_grid = [[shifted_grid[i * n + j] for j in range(n)] for i in range(m)]
        
        return new_grid



#Second Problem
class Solution(object):
    def minTimeToVisitAllPoints(self, points):
        total_time = 0
    
        for i in range(1, len(points)):
            dx = abs(points[i][0] - points[i-1][0])
            dy = abs(points[i][1] - points[i-1][1])
            total_time += max(dx, dy)
        
        return total_time



#Third Problem
class Solution(object):
    def tictactoe(self, moves):
        grid = [['' for _ in range(3)] for _ in range(3)]

        players = ['A', 'B']

        for i, move in enumerate(moves):
            row, col = move
            current_player = players[i % 2]
            grid[row][col] = 'X' if current_player == 'A' else 'O'

            if all(grid[row][c] == grid[row][col] for c in range(3)):
                return current_player

            if all(grid[r][col] == grid[row][col] for r in range(3)):
                return current_player

            if row == col and all(grid[d][d] == grid[row][col] for d in range(3)):
                return current_player

            if row + col == 2 and all(grid[d][2-d] == grid[row][col] for d in range(3)):
                return current_player

        if len(moves) == 9:
            return "Draw"

        return "Pending"





