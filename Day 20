#First Problem
class Solution(object):
    def isSubsequence(self, s, t):
        s_pointer = 0
        t_pointer = 0
        
        while s_pointer < len(s) and t_pointer < len(t):
            if s[s_pointer] == t[t_pointer]:
                s_pointer += 1
            t_pointer += 1
        
        return s_pointer == len(s)



#Second Problem
class Solution(object):
    def readBinaryWatch(self, turnedOn):
        def count_bits(num):
            count = 0
            while num:
                num &= num - 1
                count += 1
            return count
    
        result = []
        for hour in range(12):
            for minute in range(60):
                if count_bits(hour) + count_bits(minute) == turnedOn:
                    result.append("{:d}:{:02d}".format(hour, minute))
        
        return result



#Third Problem
class Solution(object):
    def sumOfLeftLeaves(self, root):
        def dfs(node, is_left):
            if not node:
                return 0
            if not node.left and not node.right and is_left:
                return node.val
            return dfs(node.left, True) + dfs(node.right, False)
        
        return dfs(root, False)



#Fourth Problem
class Solution(object):
    def toHex(self, num):
        if num == 0:
            return "0"

        hex_chars = "0123456789abcdef"
        result = ""
        
        if num < 0:
            num += 2 ** 32
        
        while num > 0:
            remainder = num % 16
            result = hex_chars[remainder] + result
            num //= 16
        
        return result



#Fifth Problem
class Solution(object):
    def longestPalindrome(self, s):
        char_freq = {}
    
        for char in s:
            char_freq[char] = char_freq.get(char, 0) + 1
        
        length = 0
        odd_freq_exists = False

        for freq in char_freq.values():
            if freq % 2 == 0:
                length += freq
            else:
                length += freq - 1
                odd_freq_exists = True
        
        if odd_freq_exists:
            length += 1
        
        return length



#Sixth Problem
class Solution(object):
    def fizzBuzz(self, n):
        result = []

        for i in range(1, n + 1):
            if i % 3 == 0 and i % 5 == 0:
                result.append("FizzBuzz")
            elif i % 3 == 0:
                result.append("Fizz")
            elif i % 5 == 0:
                result.append("Buzz")
            else:
                result.append(str(i))

        return result


End of Day 20
