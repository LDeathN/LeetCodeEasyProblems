#First Problem (260)
class Solution(object):
    def singleNumber(self, nums):
        xor_result = 0
        for num in nums:
            xor_result ^= num
        
        diff_bit = xor_result & (-xor_result) 

        x, y = 0, 0
        for num in nums:
            if num & diff_bit:
                x ^= num 
            else:
                y ^= num 

        return [x, y]



#Second Problem (264)
class Solution(object):
    def nthUglyNumber(self, n):
        ugly = [0] * n
        ugly[0] = 1  

        p2, p3, p5 = 0, 0, 0

        next_multiple_of_2 = 2
        next_multiple_of_3 = 3
        next_multiple_of_5 = 5

        for i in range(1, n):
            next_ugly = min(next_multiple_of_2, next_multiple_of_3, next_multiple_of_5)
            ugly[i] = next_ugly

            if next_ugly == next_multiple_of_2:
                p2 += 1
                next_multiple_of_2 = ugly[p2] * 2
            if next_ugly == next_multiple_of_3:
                p3 += 1
                next_multiple_of_3 = ugly[p3] * 3
            if next_ugly == next_multiple_of_5:
                p5 += 1
                next_multiple_of_5 = ugly[p5] * 5

        return ugly[-1]




