#First Problem
class Solution(object):
    def relativeSortArray(self, arr1, arr2):
        order_map = {value: index for index, value in enumerate(arr2)}

        def custom_sort_key(x):
            if x in order_map:
                return (0, order_map[x])
            else:
                return (1, x)  
        
        sorted_arr1 = sorted(arr1, key=custom_sort_key)
        
        return sorted_arr1



#Second Problem
class Solution(object):
    def numEquivDominoPairs(self, dominoes):
        from collections import defaultdict
    
        count = defaultdict(int)
        
        for a, b in dominoes:
            normalized = tuple(sorted((a, b)))
            count[normalized] += 1
        
        pairs = 0
        for c in count.values():
            if c > 1:
                pairs += c * (c - 1) // 2
        
        return pairs



#Third Problem
class Solution(object):
    def tribonacci(self, n):
        if n == 0:
            return 0
        elif n == 1 or n == 2:
            return 1
        
        start = [0, 1, 1]
        for i in range(n - 2):
            new = sum(start[-3:])
            start.append(new)
        
        return start.pop()



#Fourth Problem
SELECT
    activity_date AS day,
    COUNT(DISTINCT user_id) AS active_users
FROM
    Activity
WHERE
    activity_date BETWEEN '2019-06-28' AND '2019-07-27'
GROUP BY
    activity_date
ORDER BY
    activity_date;




