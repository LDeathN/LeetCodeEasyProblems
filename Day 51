#First Problem
class Solution(object):
    def relativeSortArray(self, arr1, arr2):
        order_map = {value: index for index, value in enumerate(arr2)}

        def custom_sort_key(x):
            if x in order_map:
                return (0, order_map[x])
            else:
                return (1, x)  
        
        sorted_arr1 = sorted(arr1, key=custom_sort_key)
        
        return sorted_arr1



#Second Problem
class Solution(object):
    def numEquivDominoPairs(self, dominoes):
        from collections import defaultdict
    
        count = defaultdict(int)
        
        for a, b in dominoes:
            normalized = tuple(sorted((a, b)))
            count[normalized] += 1
        
        pairs = 0
        for c in count.values():
            if c > 1:
                pairs += c * (c - 1) // 2
        
        return pairs




