#First Problem (204)
class Solution(object):
    def countPrimes(self, n):
        if n <= 2:
            return 0

        is_prime = [True] * n
        is_prime[0] = is_prime[1] = False  
        
        for i in range(2, int(n ** 0.5) + 1):
            if is_prime[i]:
                for j in range(i * i, n, i):
                    is_prime[j] = False

        return sum(is_prime)



#Second Problem (207)
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        adj_list = {i: [] for i in range(numCourses)}
        for course, prereq in prerequisites:
            adj_list[prereq].append(course)

        visited = [0] * numCourses

        def dfs(course):
            if visited[course] == 1:  
                return False
            if visited[course] == 2:  
                return True
            
            visited[course] = 1

            for neighbor in adj_list[course]:
                if not dfs(neighbor):
                    return False

            visited[course] = 2
            return True

        for course in range(numCourses):
            if not dfs(course):
                return False

        return True



#Third Problem (209)
class Solution(object):
    def minSubArrayLen(self, target, nums):
        n = len(nums)
        left = 0
        current_sum = 0
        min_length = float('inf') 
        
        for right in range(n):
            current_sum += nums[right] 

            while current_sum >= target:
                min_length = min(min_length, right - left + 1)  
                current_sum -= nums[left]
                left += 1 

        return 0 if min_length == float('inf') else min_length



#Fourth Problem (210)
class Solution(object):
    from collections import deque, defaultdict
    def findOrder(self, numCourses, prerequisites):
        adj_list = defaultdict(list)
        in_degree = [0] * numCourses

        for course, prereq in prerequisites:
            adj_list[prereq].append(course)
            in_degree[course] += 1

        zero_in_degree_queue = deque([i for i in range(numCourses) if in_degree[i] == 0])

        course_order = []
        
        while zero_in_degree_queue:
            course = zero_in_degree_queue.popleft()
            course_order.append(course)

            for neighbor in adj_list[course]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    zero_in_degree_queue.append(neighbor)

        if len(course_order) == numCourses:
            return course_order
        else:
            return []



#Fifth Problem (213)
class Solution(object):
    def rob(self, nums):
        def rob_linear(houses):
            n = len(houses)
            if n == 0:
                return 0
            if n == 1:
                return houses[0]
            
            dp = [0] * n
            dp[0] = houses[0]
            dp[1] = max(houses[0], houses[1])
            
            for i in range(2, n):
                dp[i] = max(dp[i - 1], dp[i - 2] + houses[i])
            
            return dp[-1]
        
        n = len(nums)
        if n == 1:
            return nums[0]

        case1 = rob_linear(nums[1:])
        case2 = rob_linear(nums[:-1])
        
        return max(case1, case2)



#Sixth Problem (215)
class Solution(object):
    def findKthLargest(self, nums, k):
        import heapq
        
        min_heap = []
    
        for num in nums:
            heapq.heappush(min_heap, num)

            if len(min_heap) > k:
                heapq.heappop(min_heap)
        
        return min_heap[0]



#Seventh Problem (216)
class Solution(object):
    def combinationSum3(self, k, n):
        def backtrack(start, combination, total):
            if len(combination) == k and total == n:
                result.append(list(combination))
                return

            if len(combination) > k or total > n:
                return

            for i in range(start, 10):
                combination.append(i)
                backtrack(i + 1, combination, total + i)
                combination.pop()

        result = []
        backtrack(1, [], 0)  
        return result



#Eigth Problem (221)
class Solution(object):
    def maximalSquare(self, matrix):
        if not matrix or not matrix[0]:
            return 0
        
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        max_side = 0

        for i in range(m):
            for j in range(n):
                if matrix[i][j] == '1':
                    if i == 0 or j == 0:
                        dp[i][j] = 1  
                    else:
                        dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                    max_side = max(max_side, dp[i][j]) 
                    
        return max_side * max_side


End of Day 161
