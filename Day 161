#First Problem (204)
class Solution(object):
    def countPrimes(self, n):
        if n <= 2:
            return 0

        is_prime = [True] * n
        is_prime[0] = is_prime[1] = False  
        
        for i in range(2, int(n ** 0.5) + 1):
            if is_prime[i]:
                for j in range(i * i, n, i):
                    is_prime[j] = False

        return sum(is_prime)



#Second Problem (207)
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        adj_list = {i: [] for i in range(numCourses)}
        for course, prereq in prerequisites:
            adj_list[prereq].append(course)

        visited = [0] * numCourses

        def dfs(course):
            if visited[course] == 1:  
                return False
            if visited[course] == 2:  
                return True
            
            visited[course] = 1

            for neighbor in adj_list[course]:
                if not dfs(neighbor):
                    return False

            visited[course] = 2
            return True

        for course in range(numCourses):
            if not dfs(course):
                return False

        return True




