#First Problem (3046)
class Solution(object):
    from collections import Counter
    def isPossibleToSplit(self, nums):
        freq = Counter(nums)

        for count in freq.values():
            if count > 2:
                return False

        unique_count = len(freq)
        required_length = len(nums) // 2

        if unique_count < required_length:
            return False

        return True



#Second Problem (3065)
class Solution(object):
    def minOperations(self, nums, k):
        nums.sort()

        count = 0
        for num in nums:
            if num < k:
                count += 1
            else:
                break  

        return count



#Third Problem (3069)
class Solution(object):
    def resultArray(self, nums):
        arr1, arr2 = [], []

        arr1.append(nums[0]) 
        arr2.append(nums[1])

        for i in range(2, len(nums)):  
            if arr1[-1] > arr2[-1]:
                arr1.append(nums[i])
            else:
                arr2.append(nums[i])

        result = arr1 + arr2
        
        return result



#Fourth Problem (3074)
class Solution(object):
    def minimumBoxes(self, apple, capacity):
        total_apples = sum(apple)

        capacity.sort(reverse=True)

        total_capacity = 0
        boxes_needed = 0

        for cap in capacity:
            total_capacity += cap
            boxes_needed += 1
            if total_capacity >= total_apples:
                break

        return boxes_needed




