#First Problem (29)
class Solution(object):
    def divide(self, dividend, divisor):
        MAX_INT = 2**31 - 1
        MIN_INT = -2**31

        if dividend == MIN_INT and divisor == -1:
            return MAX_INT

        negative = (dividend < 0) != (divisor < 0)

        dividend = abs(dividend)
        divisor = abs(divisor)
        
        quotient = 0

        while dividend >= divisor:
            temp_divisor = divisor
            multiple = 1

            while dividend >= (temp_divisor << 1):
                temp_divisor <<= 1
                multiple <<= 1
            
            dividend -= temp_divisor
            quotient += multiple

        if negative:
            quotient = -quotient

        return max(MIN_INT, min(MAX_INT, quotient))



#Second Problem (31)
class Solution(object):
    def nextPermutation(self, nums):
        i = len(nums) - 2
        while i >= 0 and nums[i] >= nums[i + 1]:
            i -= 1

        if i >= 0:
            j = len(nums) - 1
            while nums[j] <= nums[i]:
                j -= 1
            nums[i], nums[j] = nums[j], nums[i]

        nums[i + 1:] = reversed(nums[i + 1:])



#Third Problem (33)
class Solution(object):
    def search(self, nums, target):
        left, right = 0, len(nums) - 1
    
        while left <= right:
            mid = (left + right) // 2
            
            if nums[mid] == target:
                return mid
            
            if nums[left] <= nums[mid]:  
                if nums[left] <= target < nums[mid]:
                    right = mid - 1  
                else:
                    left = mid + 1  
            else:  
                if nums[mid] < target <= nums[right]:
                    left = mid + 1  
                else:
                    right = mid - 1 

        return -1



#Fourth Problem (34)
class Solution(object):
    def searchRange(self, nums, target):
        def findLeftmost(nums, target):
            left, right = 0, len(nums) - 1
            leftmost = -1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] == target:
                    leftmost = mid 
                    right = mid - 1 
                elif nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return leftmost
        
        def findRightmost(nums, target):
            left, right = 0, len(nums) - 1
            rightmost = -1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] == target:
                    rightmost = mid  
                    left = mid + 1 
                elif nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return rightmost

        leftmost = findLeftmost(nums, target)
        rightmost = findRightmost(nums, target)
        
        return [leftmost, rightmost] if leftmost != -1 else [-1, -1]



#Fifth Problem (36)
class Solution(object):
    def isValidSudoku(self, board):
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        boxes = [set() for _ in range(9)]

        for i in range(9):
            for j in range(9):
                num = board[i][j]
                if num == '.':
                    continue  

                box_index = (i // 3) * 3 + (j // 3)

                if num in rows[i] or num in cols[j] or num in boxes[box_index]:
                    return False

                rows[i].add(num)
                cols[j].add(num)
                boxes[box_index].add(num)

        return True


End of Day 142
