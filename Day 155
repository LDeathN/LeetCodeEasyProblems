#First Problem (138)
class Solution(object):
    def copyRandomList(self, head):
        if not head:
            return None

        current = head
        while current:
            new_node = Node(current.val)
            new_node.next = current.next
            current.next = new_node
            current = new_node.next

        current = head
        while current:
            if current.random:
                current.next.random = current.random.next
            current = current.next.next

        current = head
        cloned_head = head.next
        while current:
            cloned_node = current.next
            current.next = cloned_node.next
            if cloned_node.next:
                cloned_node.next = cloned_node.next.next
            current = current.next

        return cloned_head



#Second Problem (139)
class Solution(object):
    def wordBreak(self, s, wordDict):
        word_set = set(wordDict)
        n = len(s)
        
        dp = [False] * (n + 1)

        dp[0] = True

        for i in range(1, n + 1):
            for j in range(i):
                if dp[j] and s[j:i] in word_set:
                    dp[i] = True
                    break 

        return dp[n]



#Third Problem (142)
class Solution(object):
    def detectCycle(self, head):
        if not head or not head.next:
            return None

        slow = head
        fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
            if slow == fast:
                entry = head
                while entry != slow:
                    entry = entry.next
                    slow = slow.next
                return entry
        
        return None



#Fourth Problem (143)
class Solution(object):
    def reorderList(self, head):
        if not head or not head.next:
            return

        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        prev, curr = None, slow
        while curr:
            next_temp = curr.next
            curr.next = prev
            prev = curr
            curr = next_temp

        first, second = head, prev
        while second.next:
            temp1, temp2 = first.next, second.next
            first.next = second
            second.next = temp1
            first, second = temp1, temp2



#Fifth Problem (147)
class Solution(object):
    def insertionSortList(self, head):
        dummy = ListNode(0)
        current = head
        
        while current:
            prev = dummy
            while prev.next and prev.next.val < current.val:
                prev = prev.next

            next_temp = current.next

            current.next = prev.next
            prev.next = current

            current = next_temp
        
        return dummy.next


Emd of Day 155
