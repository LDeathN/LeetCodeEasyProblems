#First Problem
class Solution(object):
    def countEven(self, num):
        count = 0
        for i in range(1, num + 1):
            if sum([int(el) for el in str(i)]) % 2 == 0:
                count += 1

        return count



#Second Problem
class Solution(object):
    def prefixCount(self, words, pref):
        count = 0
        for word in words:
            if word[:len(pref)] == pref:
                count += 1

        return count



#Third Problem
class Solution(object):
    def mostFrequent(self, nums, key):
        from collections import defaultdict

        count = defaultdict(int)

        for i in range(len(nums) - 1):
            if nums[i] == key:
                count[nums[i + 1]] += 1

        max_count = -1
        result = -1
        for target, cnt in count.items():
            if cnt > max_count:
                max_count = cnt
                result = target
        
        return result



#Fourth Problem
class Solution(object):
    def cellsInRange(self, s):
        start, end = s.split(':')

        start_col = start[0]
        start_row = int(start[1:])
        end_col = end[0]
        end_row = int(end[1:])

        result = []

        for col in range(ord(start_col), ord(end_col) + 1):
            for row in range(start_row, end_row + 1):
                result.append(chr(col) + str(row))
        
        return result



#Fifth Problem
class Solution(object):
    def findKDistantIndices(self, nums, key, k):
        key_indices = []
        result_set = set()

        for i in range(len(nums)):
            if nums[i] == key:
                key_indices.append(i)

        for idx in key_indices:
            for i in range(max(0, idx - k), min(len(nums), idx + k + 1)):
                result_set.add(i)

        return sorted(result_set)


End of Day 95
