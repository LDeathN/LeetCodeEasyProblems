#First Problem
class Solution(object):
    def findShortestSubArray(self, nums):
        from collections import defaultdict

        freq = defaultdict(int)
        first = {}
        last = {}

        for i, num in enumerate(nums):
            if num not in first:
                first[num] = i
            last[num] = i
            freq[num] += 1

        degree = max(freq.values())
        
        min_length = float('inf')

        for num in freq:
            if freq[num] == degree:
                min_length = min(min_length, last[num] - first[num] + 1)

        return min_length



#Second Problem
class Solution(object):
    def searchBST(self, root, val):
        current = root

        while current is not None:
            if current.val == val:
                return current
            elif val < current.val:
                current = current.left
            else:
                current = current.right

        return None



#Third Problem
class KthLargest(object):

    def __init__(self, k, nums):
        self.k = k
        self.min_heap = nums
        heapq.heapify(self.min_heap)

        while len(self.min_heap) > k:
            heapq.heappop(self.min_heap)
        

    def add(self, val):
        if len(self.min_heap) < self.k:
            heapq.heappush(self.min_heap, val)
        elif val > self.min_heap[0]:
            heapq.heapreplace(self.min_heap, val)
        return self.min_heap[0]



#Fourth Problem
class ListNode:
    def __init__(self, key=None):
        self.key = key
        self.next = None


class MyHashSet(object):
    def __init__(self):
        self.size = 1000
        self.buckets = [None] * self.size

    def hash(self, key):
        return key % self.size

    def add(self, key):
        index = self.hash(key)
        if not self.buckets[index]:
            self.buckets[index] = ListNode(key)
        else:
            current = self.buckets[index]
            while current:
                if current.key == key:
                    return  # Key already exists
                if not current.next:
                    break
                current = current.next
            current.next = ListNode(key)
        

    def remove(self, key):
        index = self.hash(key)
        current = self.buckets[index]
        if not current:
            return
        if current.key == key:
            self.buckets[index] = current.next
        else:
            prev = current
            current = current.next
            while current:
                if current.key == key:
                    prev.next = current.next
                    return
                prev, current = current, current.next
        

    def contains(self, key):
        index = self.hash(key)
        current = self.buckets[index]
        while current:
            if current.key == key:
                return True
            current = current.next
        return False




