#First Problem (53)
class Solution(object):
    def maxSubArray(self, nums):
        current_sum = max_sum = nums[0]

        for num in nums[1:]:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        
        return max_sum



#Second Problme (54)
class Solution(object):
    def spiralOrder(self, matrix):
        result = []
    
        if not matrix or not matrix[0]:
            return result

        top, bottom = 0, len(matrix) - 1
        left, right = 0, len(matrix[0]) - 1

        while top <= bottom and left <= right:
            for i in range(left, right + 1):
                result.append(matrix[top][i])
            top += 1

            for i in range(top, bottom + 1):
                result.append(matrix[i][right])
            right -= 1

            if top <= bottom:

                for i in range(right, left - 1, -1):
                    result.append(matrix[bottom][i])
                bottom -= 1

            if left <= right:
                for i in range(bottom, top - 1, -1):
                    result.append(matrix[i][left])
                left += 1

        return result



#Third Problem (55)
class Solution(object):
    def canJump(self, nums):
        max_reach = 0
        for i in range(len(nums)):
            if i > max_reach:
                return False
            max_reach = max(max_reach, i + nums[i])
        return True



#Fourth Problem (56)
class Solution(object):
    def merge(self, intervals):
        intervals.sort(key=lambda x: x[0])

        merged = [intervals[0]]

        for i in range(1, len(intervals)):
            last_interval = merged[-1]

            if intervals[i][0] <= last_interval[1]:
                last_interval[1] = max(last_interval[1], intervals[i][1])
            else:
                merged.append(intervals[i])

        return merged




