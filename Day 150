#First Problem (92)
class Solution(object):
    def reverseBetween(self, head, left, right):
        if left == right:
            return head
            
        dummy = ListNode(0)
        dummy.next = head
        prev = dummy

        for _ in range(left - 1):
            prev = prev.next

        start = prev.next
        then = start.next

        for _ in range(right - left):
            start.next = then.next
            then.next = prev.next
            prev.next = then
            then = start.next

        return dummy.next



#Second Problem (93)
class Solution(object):
    def restoreIpAddresses(self, s):
        def is_valid(segment):

            if len(segment) > 1 and segment[0] == '0':  
                return False
            return 0 <= int(segment) <= 255

        def backtrack(start, path):
            if len(path) == 4:
                if start == len(s):
                    result.append(".".join(path))
                return

            for length in range(1, 4):
                if start + length <= len(s):
                    segment = s[start:start + length]
                    if is_valid(segment):
                        backtrack(start + length, path + [segment])

        if len(s) < 4 or len(s) > 12:
            return []

        result = []
        backtrack(0, [])
        return result



#Third Problem (95)
class Solution(object):
    def generateTrees(self, n):
        if n == 0:
            return []

        def generate(start, end):
            if start > end:
                return [None]
            
            all_trees = []

            for i in range(start, end + 1):
                left_trees = generate(start, i - 1)

                right_trees = generate(i + 1, end)

                for l in left_trees:
                    for r in right_trees:
                        current_tree = TreeNode(i)
                        current_tree.left = l
                        current_tree.right = r
                        all_trees.append(current_tree)
            
            return all_trees
        
        return generate(1, n)



#Fourth Problem (96)
class Solution(object):
    def numTrees(self, n):
        dp = [0] * (n + 1)

        dp[0] = 1 
        dp[1] = 1 

        for i in range(2, n + 1):
            for j in range(1, i + 1):
                dp[i] += dp[j - 1] * dp[i - j]
        
        return dp[n]



#Fifth Problem (97)
class Solution(object):
    def isInterleave(self, s1, s2, s3):
        if len(s1) + len(s2) != len(s3):
            return False

        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]

        dp[0][0] = True

        for i in range(1, len(s1) + 1):
            dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1]
        
        for j in range(1, len(s2) + 1):
            dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1]
        
        for i in range(1, len(s1) + 1):
            for j in range(1, len(s2) + 1):
                dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1])
        
        return dp[len(s1)][len(s2)]


End of Day 150
