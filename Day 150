#First Problem (92)
class Solution(object):
    def reverseBetween(self, head, left, right):
        if left == right:
            return head
            
        dummy = ListNode(0)
        dummy.next = head
        prev = dummy

        for _ in range(left - 1):
            prev = prev.next

        start = prev.next
        then = start.next

        for _ in range(right - left):
            start.next = then.next
            then.next = prev.next
            prev.next = then
            then = start.next

        return dummy.next



#Second Problem (93)
class Solution(object):
    def restoreIpAddresses(self, s):
        def is_valid(segment):

            if len(segment) > 1 and segment[0] == '0':  
                return False
            return 0 <= int(segment) <= 255

        def backtrack(start, path):
            if len(path) == 4:
                if start == len(s):
                    result.append(".".join(path))
                return

            for length in range(1, 4):
                if start + length <= len(s):
                    segment = s[start:start + length]
                    if is_valid(segment):
                        backtrack(start + length, path + [segment])

        if len(s) < 4 or len(s) > 12:
            return []

        result = []
        backtrack(0, [])
        return result




