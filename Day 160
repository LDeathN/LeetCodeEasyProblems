#First Problem (194)
awk '
{
    for (i = 1; i <= NF; i++) {
        if (NR == 1) {
            transposed[i] = $i
        } else {
            transposed[i] = transposed[i] " " $i
        }
    }
}
END {
    for (i = 1; i <= NF; i++) {
        print transposed[i]
    }
}
' file.txt



#Second Problem (198)
class Solution(object):
    def rob(self, nums):
        n = len(nums)
        if n == 0:
            return 0
        if n == 1:
            return nums[0]

        dp = [0] * n
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])

        for i in range(2, n):
            dp[i] = max(dp[i-1], dp[i-2] + nums[i])
        
        return dp[-1]



#Third Problem (199)
class Solution(object):
    from collections import deque
    def rightSideView(self, root):
        if not root:
            return []
        
        result = []
        queue = deque([root]) 
        
        while queue:
            level_size = len(queue)
            for i in range(level_size):
                node = queue.popleft()
                if i == level_size - 1:
                    result.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        
        return result



#Fourth Problem (200)
class Solution(object):
    def numIslands(self, grid):
        if not grid:
            return 0

        m, n = len(grid), len(grid[0])
        
        def dfs(i, j):
            if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == '0':
                return

            grid[i][j] = '0'

            dfs(i - 1, j)  
            dfs(i + 1, j)  
            dfs(i, j - 1)  
            dfs(i, j + 1)  
        
        island_count = 0

        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1': 
                    dfs(i, j)
                    island_count += 1
        
        return island_count




