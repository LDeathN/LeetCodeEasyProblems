#First Problem
class Solution(object):
    def isUnivalTree(self, root):
        if not root:
            return True
        
        def dfs(node, value):
            if not node:
                return True
            if node.val != value:
                return False
            return dfs(node.left, value) and dfs(node.right, value)
        
        return dfs(root, root.val)



#Second Problem
class Solution(object):
    def largestPerimeter(self, nums):
        nums.sort(reverse=True)

        for i in range(len(nums) - 2):
            if nums[i] < nums[i + 1] + nums[i + 2]:
                return nums[i] + nums[i + 1] + nums[i + 2]
                
        return 0



#Third Problem
class Solution(object):
    def sortedSquares(self, nums):
        squared = []
        for num in nums:
            squared.append(num * num)
        
        return sorted(squared)



#Fourth Problem
class Solution(object):
    def addToArrayForm(self, num, k):
        number = ""
        for digit in num:
            number += str(digit)
        number = int(number)
        number += k
        number = str(number)
        result = []
        for digit in number:
            result.append(int(digit))

        return result



#Fifth Problem
class Solution(object):
    from collections import deque
    def isCousins(self, root, x, y):
        if not root:
            return False

        queue = deque([(root, 0, None)])
        
        x_info = y_info = None

        while queue:
            node, depth, parent = queue.popleft()
            
            if node.val == x:
                x_info = (depth, parent)
            if node.val == y:
                y_info = (depth, parent)

            if node.left:
                queue.append((node.left, depth + 1, node))
            if node.right:
                queue.append((node.right, depth + 1, node))

            if x_info and y_info:
                break

        if x_info and y_info:
            return x_info[0] == y_info[0] and x_info[1] != y_info[1]
        
        return False


End of Day 45
