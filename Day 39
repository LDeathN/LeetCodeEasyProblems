#First Problem
class Solution(object):
    def largeGroupPositions(self, s):
        result = []
        n = len(s)
        i = 0
        
        while i < n:
            start = i
            while i < n - 1 and s[i] == s[i + 1]:
                i += 1
            if i - start + 1 >= 3:
                result.append([start, i])
            i += 1
        
        return result



#Second Problem
class Solution(object):
    def flipAndInvertImage(self, image):
        for row in image:
            row.reverse()

            for i in range(len(row)):
                row[i] = 1 - row[i]
        return image



#Third Problem
class Solution(object):
    def isRectangleOverlap(self, rec1, rec2):
        x1, y1, x2, y2 = rec1
        x3, y3, x4, y4 = rec2
        
        return not (x2 <= x3 or x1 >= x4 or y2 <= y3 or y1 >= y4)



#Fourth Problem
class Solution(object):
    def backspaceCompare(self, s, t):
        def process(string):
            stack = []
            for char in string:
                if char != '#':
                    stack.append(char)
                elif stack:
                    stack.pop()
            return ''.join(stack)
        
        return process(s) == process(t)



#Fifth Problem
class Solution(object):
    def buddyStrings(self, s, goal):
        if len(s) != len(goal):
            return False

        if s == goal:
            seen = set()
            for char in s:
                if char in seen:
                    return True
                seen.add(char)
            return False

        diff = []
        for i in range(len(s)):
            if s[i] != goal[i]:
                diff.append(i)
            if len(diff) > 2:  
                return False

        return len(diff) == 2 and s[diff[0]] == goal[diff[1]] and s[diff[1]] == goal[diff[0]]



End of Day 39
