#First Problem (106)
class Solution(object):
    def buildTree(self, inorder, postorder):
        if not inorder or not postorder:
            return None

        root_val = postorder.pop()
        root = TreeNode(root_val)

        root_index = inorder.index(root_val)

        root.right = self.buildTree(inorder[root_index + 1:], postorder)
        root.left = self.buildTree(inorder[:root_index], postorder)
        
        return root



#Second Problem (107)
class Solution(object):
    from collections import deque
    def levelOrderBottom(self, root):
        if not root:
            return []
        
        result = []
        queue = deque([root])
        
        while queue:
            level_size = len(queue)
            level_nodes = []
            
            for _ in range(level_size):
                node = queue.popleft()
                level_nodes.append(node.val)
                
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
            result.append(level_nodes)
        
        return result[::-1]



#Third Problem (113)
class Solution(object):
    def pathSum(self, root, targetSum):
        def dfs(node, currentSum, path, result):
            if not node:
                return

            path.append(node.val)
            currentSum -= node.val

            if not node.left and not node.right and currentSum == 0:
                result.append(list(path))  

            dfs(node.left, currentSum, path, result)
            dfs(node.right, currentSum, path, result)

            path.pop()

        result = []
        dfs(root, targetSum, [], result)
        return result



#Fourth Problem (114)
class Solution(object):
    def flatten(self, root):
        current = root
        while current:
            if current.left:
                rightmost = current.left
                while rightmost.right:
                    rightmost = rightmost.right

                rightmost.right = current.right
                current.right = current.left
                current.left = None  

            current = current.right




