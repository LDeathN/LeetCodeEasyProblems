#First Problem (2500)
class Solution(object):
    def deleteGreatestValue(self, grid):
        total = 0
        while grid[0]:
            current = []
            for i in range(len(grid)):
                current.append(max(grid[i]))
                grid[i].remove(max(grid[i]))
            total += max(current)

        return total



#Second Problem (2506)
class Solution(object):
    def similarPairs(self, words):
        count = 0
        n = len(words)

        char_sets = [set(word) for word in words]

        for i in range(n):
            for j in range(i + 1, n):
                if char_sets[i] == char_sets[j]:
                    count += 1
        
        return count



#Third Problem (2511)
class Solution(object):
    def captureForts(self, forts):
        max_captures = 0
        n = len(forts)
        
        for i in range(n):
            if forts[i] == 1:
                count = 0
                for j in range(i + 1, n):
                    if forts[j] == 0:
                        count += 1
                    elif forts[j] == -1:
                        max_captures = max(max_captures, count)
                        break
                    else:
                        break

                count = 0
                for j in range(i - 1, -1, -1):
                    if forts[j] == 0:
                        count += 1
                    elif forts[j] == -1:
                        max_captures = max(max_captures, count)
                        break
                    else:  
                        break
                        
        return max_captures



#Fourth Problem (2515)
class Solution(object):
    def closetTarget(self, words, target, startIndex):
        n = len(words)
        min_distance = float('inf')
        
        for i in range(n):
            if words[i] == target:
                clockwise_distance = (i - startIndex + n) % n
                counterclockwise_distance = (startIndex - i + n) % n
                min_distance = min(min_distance, clockwise_distance, counterclockwise_distance)
        
        return min_distance if min_distance != float('inf') else -1



#Fifth Problem (2520)
class Solution(object):
    def countDigits(self, num):
        total = 0
        digits = [int(digit) for digit in str(num)]
        for digit in digits:
            if num % digit == 0:
                total += 1
        
        return total


End of Day 108
