#First Problem (2810)
class Solution(object):
    def finalString(self, s):
        result = ""
        for letter in s:
            if letter == "i":
                result = result[::-1]
            else:
                result += letter
        
        return result



#Second Problem (2815)
class Solution(object):
    def maxSum(self, nums):
        digit_map = {}

        for num in nums:
            largest_digit = max(int(digit) for digit in str(num))

            if largest_digit not in digit_map:
                digit_map[largest_digit] = []
            digit_map[largest_digit].append(num)

        max_sum = -1

        for digit, numbers in digit_map.items():
            if len(numbers) > 1:
                numbers.sort(reverse=True)
                max_sum = max(max_sum, numbers[0] + numbers[1])

        return max_sum



#Third Problem (2824)
class Solution(object):
    def countPairs(self, nums, target):
        count = 0
        for i in range(len(nums)):
            for j in range(len(nums)):
                if i < j and nums[i] + nums[j] < target:
                    count += 1
        
        return count



#Fourth Problem (2828)
class Solution(object):
    def isAcronym(self, words, s):
        if len(words) != len(s):
            return False
        for i in range(len(words)):
            if words[i][0] != s[i]:
                return False
        
        return True



#Fifth Problem (2833)
class Solution(object):
    def furthestDistanceFromOrigin(self, moves):
        if "R" in moves or "L" in moves:
            if moves.count("L") > moves.count("R"):
                return len(moves) - moves.count("R") * 2
            elif moves.count("R") > moves.count("L"):
                return len(moves) - moves.count("L") * 2
            else:
                return len(moves) - moves.count("L") - moves.count("R")
        else:
            return len(moves)


End of Day 123
