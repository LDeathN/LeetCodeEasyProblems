#First Problem (82)
class Solution(object):
    def deleteDuplicates(self, head):
        dummy = ListNode(0)
        dummy.next = head
        
        prev = dummy

        current = head
        while current:
            if current.next and current.val == current.next.val:
                while current.next and current.val == current.next.val:
                    current = current.next
                prev.next = current.next
            else:
                prev = prev.next
            current = current.next

        return dummy.next



#Second Problem (86)
class Solution(object):
    def partition(self, head, x):
        before_head = ListNode(0)
        after_head = ListNode(0)

        before = before_head
        after = after_head

        current = head
        while current:
            if current.val < x:
                before.next = current
                before = before.next
            else:
                after.next = current
                after = after.next

            current = current.next
        
        before.next = after_head.next
        after.next = None

        return before_head.next



#Third Problem (89)
class Solution(object):
    def grayCode(self, n):
        result = [0]
        for i in range(n):
            reflected = [x + (1 << i) for x in reversed(result)]
            result.extend(reflected)
        return result



#Fourth Problem (90)
class Solution(object):
    def subsetsWithDup(self, nums):
        def backtrack(start, path):
            result.append(path[:])
            for i in range(start, len(nums)):
                if i > start and nums[i] == nums[i - 1]:
                    continue
                path.append(nums[i])
                backtrack(i + 1, path)
                path.pop()
        
        nums.sort()  
        result = []
        backtrack(0, [])
        return result




