#First Problem
class Solution(object):
    def licenseKeyFormatting(self, s, k):
        s = s.replace('-', '').upper()

        first_group_len = len(s) % k

        result = s[:first_group_len]

        for i in range(first_group_len, len(s), k):
            if i != 0:
                result += '-'
            result += s[i:i+k]
        
        return result



#Second Problem
class Solution(object):
    def findMaxConsecutiveOnes(self, nums):
        max_count = 0
        count = 0
        
        for num in nums:
            if num == 1:
                count += 1
                max_count = max(max_count, count)
            else:
                count = 0
        
        return max_count



#Third Problem
class Solution(object):
    def findPoisonedDuration(self, timeSeries, duration):
        if not timeSeries:
            return 0
        
        total_poison_duration = 0
        
        for i in range(len(timeSeries) - 1):
            poison_start = timeSeries[i]
            poison_end = timeSeries[i] + duration - 1
            next_attack_time = timeSeries[i + 1]
            
            if next_attack_time <= poison_end:
                total_poison_duration += next_attack_time - poison_start
            else:
                total_poison_duration += duration

        total_poison_duration += duration
        
        return total_poison_duration



#Fourth Problem
class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        result = []
        for element in nums1:
            found = False
            position = nums2.index(element)
            for i in range(position + 1, len(nums2)):
                if nums2[i] > nums2[position]:
                    result.append(nums2[i])
                    found = True
                    break
            if not found:
                result.append(-1)
        
        return result



#Fifth Problem
class Solution(object):
    def constructRectangle(self, area):
        length = int(math.sqrt(area))

        while area % length != 0:
            length -= 1

        width = area // length
        
        return [width, length]


End of Day 23
