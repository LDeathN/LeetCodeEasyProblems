#First Problem (284)
class PeekingIterator(object):
    def __init__(self, iterator):
        self.iterator = iterator
        self.peeked_value = None
        

    def peek(self):
        if self.peeked_value is None:
            if self.iterator.hasNext():
                self.peeked_value = self.iterator.next()
        return self.peeked_value
        

    def next(self):
        if self.peeked_value is not None:
            result = self.peeked_value
            self.peeked_value = None
            return result
        else:
            return self.iterator.next()
        

    def hasNext(self):
        return self.peeked_value is not None or self.iterator.hasNext()



#Second Problem (287)
class Solution(object):
    def findDuplicate(self, nums):
        slow = nums[0]
        fast = nums[0]
        
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break

        slow = nums[0]
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]
        
        return slow




