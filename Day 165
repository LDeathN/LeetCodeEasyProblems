#First Problem (284)
class PeekingIterator(object):
    def __init__(self, iterator):
        self.iterator = iterator
        self.peeked_value = None
        

    def peek(self):
        if self.peeked_value is None:
            if self.iterator.hasNext():
                self.peeked_value = self.iterator.next()
        return self.peeked_value
        

    def next(self):
        if self.peeked_value is not None:
            result = self.peeked_value
            self.peeked_value = None
            return result
        else:
            return self.iterator.next()
        

    def hasNext(self):
        return self.peeked_value is not None or self.iterator.hasNext()



#Second Problem (287)
class Solution(object):
    def findDuplicate(self, nums):
        slow = nums[0]
        fast = nums[0]
        
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break

        slow = nums[0]
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]
        
        return slow



#Third Problem (289)
class Solution(object):
    def gameOfLife(self, board):
        m, n = len(board), len(board[0])

        def countLiveNeighbors(r, c):
            directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
            live_neighbors = 0
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                if 0 <= nr < m and 0 <= nc < n and abs(board[nr][nc]) == 1:
                    live_neighbors += 1
            return live_neighbors

        for i in range(m):
            for j in range(n):
                live_neighbors = countLiveNeighbors(i, j)

                if board[i][j] == 1 and (live_neighbors < 2 or live_neighbors > 3):
                    board[i][j] = -1 

                if board[i][j] == 0 and live_neighbors == 3:
                    board[i][j] = 2  

        for i in range(m):
            for j in range(n):
                if board[i][j] == -1:
                    board[i][j] = 0  
                elif board[i][j] == 2:
                    board[i][j] = 1  

        return board



#Fourth Problem (299)
class Solution(object):
    def getHint(self, secret, guess):
        bulls = 0
        cows = 0

        secret_count = [0] * 10
        guess_count = [0] * 10

        for i in range(len(secret)):
            if secret[i] == guess[i]:
                bulls += 1
            else:
                secret_count[int(secret[i])] += 1
                guess_count[int(guess[i])] += 1

        for i in range(10):
            cows += min(secret_count[i], guess_count[i])

        return "{}A{}B".format(bulls, cows)



#Fifth Problem (300)
class Solution(object):
    def lengthOfLIS(self, nums):
        if not nums:
            return 0

        dp = [1] * len(nums)
        
        for i in range(1, len(nums)):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i], dp[j] + 1)

        return max(dp)


End of Day 165
