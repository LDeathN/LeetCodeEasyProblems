#First Problem
class Solution(object):
    def floodFill(self, image, sr, sc, color):
        def dfs(r, c):
            if r < 0 or r >= len(image) or c < 0 or c >= len(image[0]) or image[r][c] != original_color:
                return
            image[r][c] = color
            dfs(r + 1, c)
            dfs(r - 1, c)
            dfs(r, c + 1)
            dfs(r, c - 1)

        original_color = image[sr][sc]
        if original_color != color:
            dfs(sr, sc)
        return image



#Second Problem
class Solution(object):
    def nextGreatestLetter(self, letters, target):
        left, right = 0, len(letters)
        while left < right:
            mid = (left + right) // 2
            if letters[mid] <= target:
                left = mid + 1
            else:
                right = mid
        return letters[left % len(letters)] if left < len(letters) else letters[0]



#Third Problem
class Solution(object):
    def minCostClimbingStairs(self, cost):
        n = len(cost)
        dp = [0] * n

        dp[0] = cost[0]
        dp[1] = cost[1]

        for i in range(2, n):
            dp[i] = cost[i] + min(dp[i - 1], dp[i - 2])

        return min(dp[n - 1], dp[n - 2])



#Fourth Problem
class Solution(object):
    def dominantIndex(self, nums):
        max_num = float('-inf')
        second_max_num = float('-inf')
        max_index = -1

        for i, num in enumerate(nums):
            if num > max_num:
                second_max_num = max_num
                max_num = num
                max_index = i
            elif num > second_max_num:
                second_max_num = num

        if max_num >= 2 * second_max_num:
            return max_index
        else:
            return -1



#Fifth Problem
class Solution(object):
    def shortestCompletingWord(self, licensePlate, words):
        license_plate_freq = {}
        for char in licensePlate:
            if char.isalpha():
                char_lower = char.lower()
                license_plate_freq[char_lower] = license_plate_freq.get(char_lower, 0) + 1

        shortest_word = None

        for word in words:
            word_freq = {}
            for char in word:
                word_freq[char] = word_freq.get(char, 0) + 1

            valid_word = True
            for char, freq in license_plate_freq.items():
                if word_freq.get(char, 0) < freq:
                    valid_word = False
                    break

            if valid_word and (shortest_word is None or len(word) < len(shortest_word)):
                shortest_word = word

        return shortest_word


End of Day 36
