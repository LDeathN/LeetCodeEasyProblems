#First Problem
class Solution(object):
    def arrayRankTransform(self, arr):
        sorted_unique_elements = sorted(set(arr))
        rank_map = {val: rank + 1 for rank, val in enumerate(sorted_unique_elements)}
        return [rank_map[val] for val in arr]



#Second Problem
class Solution(object):
    def removePalindromeSub(self, s):
        if s == s[::-1]:
            return 1
        else:
            return 2



#Third Problem
class Solution(object):
    def kWeakestRows(self, mat, k):
        soldier_count = []
    
        for i, row in enumerate(mat):
            count = sum(row)  
            soldier_count.append((count, i))

        soldier_count.sort()

        weakest_rows = [index for _, index in soldier_count[:k]]
        
        return weakest_rows



#Fourth Problem
class Solution(object):
    def numberOfSteps(self, num):
        count = 0
        while num:
            count += 1
            if num % 2 == 0:
                num /= 2
            else:
                num -= 1
        
        return count



#Fifth Problem
class Solution(object):
    def checkIfExist(self, arr):
        for i in range(len(arr)):
            for j in range(len(arr)):
                if arr[i] == arr[j] * 2 and i != j:
                    return True
        
        return False



End of Day 58
