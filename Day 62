#First Problem
class Solution(object):
    def maxScore(self, s):
        result = 0

        for i in range(1, len(s)):
            score = len([digit for digit in s[:i] if digit == "0"]) + len([digit for digit in s[i:] if digit == "1"])
            if score > result:
                result = score

        return result



#Second Problem
class Solution(object):
    def kidsWithCandies(self, candies, extraCandies):
        max_candies = max(candies)
        result = []

        for candy in candies:
            if candy + extraCandies >= max_candies:
                result.append(True)
            else:
                result.append(False)

        return result



#Third Problem
class Solution(object):
    def destCity(self, paths):
        outgoing = set(cityA for cityA, cityB in paths)

        for cityA, cityB in paths:
            if cityB not in outgoing:
                return cityB



#Fourth Problem
class Solution(object):
    def kLengthApart(self, nums, k):
        count = 1
        condition = False
        for num in nums:
            if num == 1:
                if count < k and condition: 
                    return False
                condition = True
                count = 0
            else:
                count += 1
        
        return True



#Fifth Problem
class Solution(object):
    def maxPower(self, s):
        if len(s) == 1:
            return 1

        s = [el for el in s]
        count = 0
        result = []
        for i in range(1, len(s)):
            if s[i] == s[i-1]:
                count += 1
            else:
                result.append(count + 1)
                count = 0
            if i == len(s) - 1:
                result.append(count + 1)

        return max(result)


End of Day 62
