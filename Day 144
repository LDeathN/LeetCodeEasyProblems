#First Problem (46)
class Solution(object):
    def permute(self, nums):
        def backtrack(path, used, res):
            if len(path) == len(nums):
                res.append(path[:])  
                return
            for i in range(len(nums)):
                if not used[i]:
                    used[i] = True  
                    path.append(nums[i])  
                    backtrack(path, used, res)
                    path.pop() 
                    used[i] = False 

        res = []
        used = [False] * len(nums)  
        backtrack([], used, res)
        return res



#Second Problem (47)
class Solution(object):
    def permuteUnique(self, nums):
        def backtrack(path, used, res):
            if len(path) == len(nums):
                res.append(path[:])
                return
            for i in range(len(nums)):
                if used[i]:
                    continue 
                if i > 0 and nums[i] == nums[i - 1] and not used[i - 1]:
                    continue  
                used[i] = True
                path.append(nums[i])
                backtrack(path, used, res)
                path.pop()
                used[i] = False

        nums.sort()  
        res = []
        used = [False] * len(nums) 
        backtrack([], used, res)
        return res



#Third Problem (48)
class Solution(object):
    def rotate(self, matrix):
        n = len(matrix)
        
        for i in range(n):
            for j in range(i, n):
                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]

        for i in range(n):
            matrix[i].reverse()



#Fourth Problem (49)
class Solution(object):
    from collections import defaultdict
    def groupAnagrams(self, strs):
        anagram_map = defaultdict(list)
    
        for s in strs:
            sorted_str = ''.join(sorted(s))
            anagram_map[sorted_str].append(s)

        return list(anagram_map.values())




