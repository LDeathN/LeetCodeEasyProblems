#First Problem
class Solution(object):
    def isPrefixString(self, s, words):
        result = ""
        for i in range(len(words)):
            if words[i] in s:
                result += words[i]
            else:
                return False
            if result == s:
                return True
        return False



#Second Problem
SELECT e.employee_id
FROM Employees e
LEFT JOIN Salaries s ON e.employee_id = s.employee_id
WHERE s.salary IS NULL
UNION
SELECT s.employee_id
FROM Salaries s
LEFT JOIN Employees e ON s.employee_id = e.employee_id
WHERE e.name IS NULL
ORDER BY employee_id;



#Third Problem
class Solution(object):
    def numOfStrings(self, patterns, word):
        count = 0
        for pattern in patterns:
            if pattern in word:
                count += 1
        return count



#Fourth Problem
class Solution(object):
    def validPath(self, n, edges, source, destination):
        from collections import deque, defaultdict

        graph = defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)

        queue = deque([source])
        visited = set([source])
        
        while queue:
            node = queue.popleft()

            if node == destination:
                return True

            for neighbor in graph[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
        
        return False



#Fifth Problem
class Solution(object):
    def minTimeToType(self, word):
        total_time = 0
        current_pos = 0  

        for char in word:
            target_pos = ord(char) - ord('a')
            clockwise_dist = (target_pos - current_pos) % 26
            counterclockwise_dist = (current_pos - target_pos) % 26
            total_time += min(clockwise_dist, counterclockwise_dist) + 1
            current_pos = target_pos

        return total_time


End of Day 86
