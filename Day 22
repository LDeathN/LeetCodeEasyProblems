#First Problem
class Solution(object):
    def findContentChildren(self, g, s):
        g = sorted(g)
        s = sorted(s)
        result = 0
        if not g or not s:
            return 0
        
        while g and s:
            child = g.pop(0)
            cookie = s.pop(0)

            if cookie >= child:
                result += 1
            else:
                g.insert(0, child)
        
        return result



#Second Problem
class Solution(object):
    def repeatedSubstringPattern(self, s):
        n = len(s)
        for i in range(1, n//2 + 1):
            if n % i == 0:
                if s[:i] * (n // i) == s:
                    return True
        return False



#Third Problem
class Solution(object):
    def hammingDistance(self, x, y):
        xor_result = x ^ y
    
        distance = 0
        while xor_result:
            distance += xor_result & 1
            xor_result >>= 1
            
        return distance 



#Fourth Problem
class Solution(object):
    def islandPerimeter(self, grid):
        result = 0
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1:
                    result += 4
                    if i - 1 in range(len(grid)):
                        if grid[i - 1][j] == 1:
                            result -= 1
                    if i + 1 in range(len(grid)):
                        if grid[i + 1][j] == 1:
                            result -= 1
                    if j - 1 in range(len(grid[i])):
                        if grid[i][j - 1] == 1:
                            result -= 1
                    if j + 1 in range(len(grid[i])):
                        if grid[i][j + 1] == 1:
                            result -= 1
        return result




