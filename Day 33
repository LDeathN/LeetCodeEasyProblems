#First Problem
class Solution(object):
    def findLengthOfLCIS(self, nums):
        if not nums:
            return 0
        
        max_length = 1
        current_length = 1
        
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                current_length += 1
            else:
                max_length = max(max_length, current_length)
                current_length = 1
        
        max_length = max(max_length, current_length)
        return max_length



#Second Problem
class Solution(object):
    def validPalindrome(self, s):
        def is_palindrome(sub):
            return sub == sub[::-1]
        
        left, right = 0, len(s) - 1
        
        while left < right:
            if s[left] != s[right]:
                skip_left = s[left + 1:right + 1]
                skip_right = s[left:right]
                return is_palindrome(skip_left) or is_palindrome(skip_right)
            left += 1
            right -= 1
        
        return True



#Third Problem
class Solution(object):
    def calPoints(self, operations):
        stack = []
    
        for op in operations:
            if op == "+":
                stack.append(stack[-1] + stack[-2])
            elif op == "D":
                stack.append(2 * stack[-1])
            elif op == "C":
                stack.pop()
            else:
                stack.append(int(op))
        
        return sum(stack)



#Fourth Problem
class Solution(object):
    def hasAlternatingBits(self, n):
        shifted_n = n >> 1
        xor_n = n ^ shifted_n
        return (xor_n & (xor_n + 1)) == 0




