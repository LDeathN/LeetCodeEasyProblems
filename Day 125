#First Problem (2864)
class Solution(object):
    def maximumOddBinaryNumber(self, s):
        ones = s.count('1')
        zeros = s.count('0')

        if ones > 1:
            return '1' * (ones - 1) + '0' * zeros + '1'
        else:
            return '0' * zeros + '1'



#Second Problem (2869)
class Solution(object):
    def minOperations(self, nums, k):
        collected = set()
        steps = 0
        n = len(nums)

        for i in range(n - 1, -1, -1):
            steps += 1
            if 1 <= nums[i] <= k:
                collected.add(nums[i])
            if len(collected) == k:
                return steps
        
        return steps



#Third Problem (2873)
class Solution(object):
    def maximumTripletValue(self, nums):
        result = 0
        for i in range(len(nums) - 2):
            for j in range(i + 1, len(nums) - 1):
                for k in range(j + 1, len(nums)):
                    if (nums[i] - nums[j]) * nums[k] > result:
                        result = (nums[i] - nums[j]) * nums[k]
        return result



#Fourth Problem (2899)
class Solution(object):
    def lastVisitedIntegers(self, nums):
        seen = []
        ans = []
        k = 0  
        
        for num in nums:
            if num != -1:
                seen.insert(0, num) 
                k = 0  
            else:
                k += 1  
                if k <= len(seen):
                    ans.append(seen[k - 1])  
                else:
                    ans.append(-1) 
        
        return ans




