#First Problem (2996)
class Solution(object):
    def missingInteger(self, nums):
        longest_seq_sum = nums[0]
        for i in range(1, len(nums)):
            if nums[i] == nums[i - 1] + 1:
                longest_seq_sum += nums[i]
            else:
                break

        x = longest_seq_sum
        nums_set = set(nums)

        while x in nums_set:
            x += 1
        
        return x



#Second Problem (3000)
class Solution(object):
    def areaOfMaxDiagonal(self, dimensions):
        max_diagonal = 0
        max_area = 0

        for length, width in dimensions:
            diagonal = math.sqrt(length ** 2 + width ** 2)
            area = length * width

            if diagonal > max_diagonal:
                max_diagonal = diagonal
                max_area = area
            elif diagonal == max_diagonal:
                max_area = max(max_area, area)

        return max_area



#Third Problem (3005)
class Solution(object):
    def maxFrequencyElements(self, nums):
        from collections import Counter
        freq = Counter(nums)

        max_freq = max(freq.values())

        total = sum(count for count in freq.values() if count == max_freq)
        
        return total



#Fourth Problem (3010)
class Solution(object):
    def minimumCost(self, nums):
        n = len(nums)
        min_cost = float('inf')

        for i in range(n - 2):
            for j in range(i + 1, n - 1):
                cost = nums[0] + nums[i + 1] + nums[j + 1]
                min_cost = min(min_cost, cost)
        
        return min_cost



#Fifth Problem (3014)
class Solution(object):
    def minimumPushes(self, word):
        from collections import Counter

        frequency = Counter(word)

        freq_sorted_chars = sorted(frequency.items(), key=lambda x: -x[1])

        keys = [[] for _ in range(8)]

        idx = 0
        for char, freq in freq_sorted_chars:
            keys[idx].append((char, freq))
            idx = (idx + 1) % 8

        total_pushes = 0
        for key in keys:
            for i, (char, freq) in enumerate(key):
                total_pushes += (i + 1) * freq  

        return total_pushes


End of Day 129
