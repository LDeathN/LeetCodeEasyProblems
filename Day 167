#First Problem (313)
class Solution(object):
    def nthSuperUglyNumber(self, n, primes):
        k = len(primes)
        ugly = [1] * n 
        pointers = [0] * k  
        next_ugly = primes[:]  
        
        for i in range(1, n):
            next_val = min(next_ugly)
            ugly[i] = next_val

            for j in range(k):
                if next_val == next_ugly[j]:
                    pointers[j] += 1
                    next_ugly[j] = ugly[pointers[j]] * primes[j]
        
        return ugly[-1]



#Second Problem (316)
class Solution(object):
    def removeDuplicateLetters(self, s):
        freq = {ch: 0 for ch in s}
        for ch in s:
            freq[ch] += 1
        
        stack = []  
        visited = set() 

        for ch in s:
            freq[ch] -= 1

            if ch in visited:
                continue

            while stack and ch < stack[-1] and freq[stack[-1]] > 0:
                visited.remove(stack.pop())

            stack.append(ch)
            visited.add(ch)

        return ''.join(stack)




