#First Problem (117)
class Solution(object):
    def connect(self, root):
        if not root:
            return None

        current = root
        
        while current:
            dummy = Node(0)
            tail = dummy

            while current:
                if current.left:
                    tail.next = current.left
                    tail = tail.next
                if current.right:
                    tail.next = current.right
                    tail = tail.next
                current = current.next

            current = dummy.next
        
        return root



#Second Problem (120)
class Solution(object):
    def minimumTotal(self, triangle):
        for row in range(len(triangle) - 2, -1, -1):
            for col in range(len(triangle[row])):
                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])

        return triangle[0][0]



#Third Problem (122)
class Solution(object):
    def maxProfit(self, prices):
        total_profit = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i - 1]:
                total_profit += prices[i] - prices[i - 1]
        return total_profit




