#First Problem (117)
class Solution(object):
    def connect(self, root):
        if not root:
            return None

        current = root
        
        while current:
            dummy = Node(0)
            tail = dummy

            while current:
                if current.left:
                    tail.next = current.left
                    tail = tail.next
                if current.right:
                    tail.next = current.right
                    tail = tail.next
                current = current.next

            current = dummy.next
        
        return root



#Second Problem (120)
class Solution(object):
    def minimumTotal(self, triangle):
        for row in range(len(triangle) - 2, -1, -1):
            for col in range(len(triangle[row])):
                triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])

        return triangle[0][0]



#Third Problem (122)
class Solution(object):
    def maxProfit(self, prices):
        total_profit = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i - 1]:
                total_profit += prices[i] - prices[i - 1]
        return total_profit



#Fourth Problem (128)
class Solution(object):
    def longestConsecutive(self, nums):
        num_set = set(nums)
        longest_streak = 0

        for num in num_set:
            if num - 1 not in num_set:
                current_num = num
                current_streak = 1

                while current_num + 1 in num_set:
                    current_num += 1
                    current_streak += 1

                longest_streak = max(longest_streak, current_streak)

        return longest_streak



#Fifth Problem (129)
class Solution(object):
    def sumNumbers(self, root):
        def dfs(node, current_number):
            if not node:
                return 0
            
            current_number = current_number * 10 + node.val
            
            if not node.left and not node.right:
                return current_number

            left_sum = dfs(node.left, current_number)
            right_sum = dfs(node.right, current_number)
            
            return left_sum + right_sum
        
        return dfs(root, 0)


End of Day 153
