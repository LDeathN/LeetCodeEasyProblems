#First Problem (2928)
class Solution(object):
    def distributeCandies(self, n, limit):
        count = 0

        for x in range(0, min(n, limit) + 1):
            for y in range(0, min(n - x, limit) + 1):
                z = n - x - y
                if 0 <= z <= limit:
                    count += 1
                    
        return count



#Second Problem (2932)
class Solution(object):
    def maximumStrongPairXor(self, nums):
        max_xor = 0

        for i in range(len(nums)):
            for j in range(i, len(nums)):
                x, y = nums[i], nums[j]

                if abs(x - y) <= min(x, y):
                    max_xor = max(max_xor, x ^ y)

        return max_xor



#Third Problem (2942)
class Solution(object):
    def findWordsContaining(self, words, x):
        result = []
        for i in range(len(words)):
            if x in words[i]:
                result.append(i)
        return result



#Fourth Problem (2946)
class Solution(object):
    def areSimilar(self, mat, k):
        m = len(mat)    
        n = len(mat[0]) 

        effective_k = k % n

        def left_shift(row, shifts):
            return row[shifts:] + row[:shifts]

        def right_shift(row, shifts):
            return row[-shifts:] + row[:-shifts]

        shifted_mat = [row[:] for row in mat]

        for i in range(m):
            if i % 2 == 0: 
                shifted_mat[i] = left_shift(shifted_mat[i], effective_k)
            else:          
                shifted_mat[i] = right_shift(shifted_mat[i], effective_k)

        return shifted_mat == mat



#Fifth Problem (2951)
class Solution(object):
    def findPeaks(self, mountain):
        result = []
        for i in range(1, len(mountain) - 1):
            if mountain[i - 1] < mountain[i] > mountain[i + 1]:
                result.append(i)
        
        return result


End of Day 127
