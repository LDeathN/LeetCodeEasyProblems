#First Problem
class Solution(object):
    def findJudge(self, n, trust):
        if n == 1 and not trust:
            return 1

        trusts = [0] * (n + 1)
        trustedBy = [0] * (n + 1)

        for a, b in trust:
            trusts[a] += 1
            trustedBy[b] += 1

        for i in range(1, n + 1):
            if trusts[i] == 0 and trustedBy[i] == n - 1:
                return i

        return -1



#Second Problem
class Solution(object):
    def left(self, x, y, board):
        while y > 0:
            y -= 1
            if board[x][y] == "p":
                return 1
            elif board[x][y] == "B":
                break
        return 0

    def right(self, x, y, board):
        while y < 7:
            y += 1
            if board[x][y] == "p":
                return 1
            elif board[x][y] == "B":
                break
        return 0

    def up(self, x, y, board):
        while x > 0:
            x -= 1
            if board[x][y] == "p":
                return 1
            elif board[x][y] == "B":
                break
        return 0

    def down(self, x, y, board):
        while x < 7:
            x += 1
            if board[x][y] == "p":
                return 1
            elif board[x][y] == "B":
                break
        return 0

    def numRookCaptures(self, board):
        count = 0
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == "R":
                    x, y = i, j

        count += self.left(x, y, board)
        count += self.right(x, y, board)
        count += self.up(x, y, board)
        count += self.down(x, y, board)

        return count



#Third Problem
class Solution(object):
    from collections import Counter

    def commonChars(self, words):
        common_count = Counter(words[0])

        for word in words[1:]:
            word_count = Counter(word)
            for char in common_count:
                common_count[char] = min(common_count[char], word_count[char])

        result = []
        for char, count in common_count.items():
            result.extend([char] * count)
        
        return result



#Fourth Problem
class Solution(object):
    def largestSumAfterKNegations(self, nums, k):
        
        for i in range(k):
            nums = sorted(nums)
            for i in range(len(nums)):
                if nums[i] < 0:
                    nums[i] = abs(nums[i])
                    break
                elif nums[i] == 0:
                    break
                elif nums[i] > 0:
                    nums[i] = -nums[i]
                    break

        result = sum(nums)
        return result




