#First Problem
class Solution(object):
    def increasingBST(self, root):
        def in_order_traversal(node):
            if not node:
                return
            in_order_traversal(node.left)
            node.left = None
            self.current.right = node
            self.current = node
            in_order_traversal(node.right)
    
        dummy = TreeNode()
        self.current = dummy
        in_order_traversal(root)
        return dummy.right



#Second Problem
class Solution(object):
    def sortArrayByParity(self, nums):
        result = []
        for num in nums:
            if num % 2 == 0:
                result.insert(0, num)
            else:
                result.append(num)
        
        return result



#Third Problem
class Solution(object):
    def smallestRangeI(self, nums, k):
        if len(nums) == 1:
            return 0
        
        min_val = min(nums)
        max_val = max(nums)

        new_min = min_val + k
        new_max = max_val - k

        return max(0, new_max - new_min)



#Fourth Problem
class Solution(object):
    from collections import Counter
    from functools import reduce

    def gcd(sefl, a, b):
        while b:
            a, b = b, a % b
        return a


    def hasGroupsSizeX(self, deck):
        count = Counter(deck)

        frequencies = list(count.values())

        gcd_of_frequencies = reduce(self.gcd, frequencies)

        return gcd_of_frequencies > 1



#Fifth Problem
class Solution(object):
    def reverseOnlyLetters(self, s):
        letters = [char for char in s if char.isalpha()]
        reversed_letters = letters[::-1]

        iter_reversed = iter(reversed_letters)

        result = []
        for char in s:
            if char.isalpha():
                result.append(next(iter_reversed))
            else:
                result.append(char)
        
        return ''.join(result)


End of Day 42
