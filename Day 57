#First Problem
class Solution(object):
    def freqAlphabets(self, s):
        result = []
        i = 0
        
        while i < len(s):
            if i + 2 < len(s) and s[i + 2] == '#':
                num = int(s[i:i+2])
                result.append(chr(num + 96))
                i += 3 
            else:
                num = int(s[i])
                result.append(chr(num + 96))
                i += 1 
        
        return ''.join(result)



#Second Problem
class Solution(object):
    def decompressRLElist(self, nums):
        result = []
        for i in range(0, len(nums), 2):
            freq = nums[i]
            val = nums[i + 1]
            current = [val] * freq
            result += current
        
        return result



#Third Problem
class Solution(object):
    def is_no_zero_integer(self, num):
        while num > 0:
            if num % 10 == 0:
                return False
            num //= 10
        return True

    def getNoZeroIntegers(self, n):
        for a in range(1, n):
            b = n - a
            if self.is_no_zero_integer(a) and self.is_no_zero_integer(b):
                return [a, b]



#Fourth Problem
class Solution(object):
    def maximum69Number (self, num):
        changed = []
        num = str(num)
        for i in range(len(num)):
            current = num[:i] + "9" + num[i + 1:]
            changed.append(int(current))

        return max(changed)



#Fifth Problem
SELECT p.product_name, SUM(o.unit) AS unit
FROM Products p
JOIN Orders o ON p.product_id = o.product_id
WHERE o.order_date BETWEEN '2020-02-01' AND '2020-02-29'
GROUP BY p.product_name
HAVING SUM(o.unit) >= 100;



End of Day 57
