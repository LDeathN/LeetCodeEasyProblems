#First Problem (2595)
class Solution(object):
    def evenOddBit(self, n):
        binary_rep = bin(n)[2:] 
        even_count = 0
        odd_count = 0

        for i in range(len(binary_rep)):
            if binary_rep[-(i + 1)] == '1': 
                if i % 2 == 0:
                    even_count += 1
                else:
                    odd_count += 1
        
        return [even_count, odd_count]
        


#Second Problem (2600)
class Solution(object):
    def kItemsWithMaximumSum(self, numOnes, numZeros, numNegOnes, k):
        ones_picked = min(k, numOnes)
        k -= ones_picked  

        zeros_picked = min(k, numZeros)
        k -= zeros_picked

        neg_ones_picked = k 

        return ones_picked - neg_ones_picked



#Third Problem (2605)
class Solution(object):
    def minNumber(self, nums1, nums2):
        nums1 = sorted(nums1)
        nums2 = sorted(nums2)
        for num in nums1:
            if num in nums2:
                return num
        if nums1[0] > nums2[0]:
            return int(str(nums2[0]) + str(nums1[0]))
        else:
            return int(str(nums1[0]) + str(nums2[0]))



#Fourth Problem (2609)
class Solution(object):
    def findTheLongestBalancedSubstring(self, s):
        max_len = 0
        i = 0
        
        while i < len(s):
            count_0 = 0
            count_1 = 0

            while i < len(s) and s[i] == '0':
                count_0 += 1
                i += 1
            
            while i < len(s) and s[i] == '1':
                count_1 += 1
                i += 1

            max_len = max(max_len, 2 * min(count_0, count_1))
        
        return max_len



#Fifth Problem (2614)
class Solution(object):
    def diagonalPrime(self, nums):
        numbers = []
        for i in range(len(nums)):
            numbers.append(nums[i][i])
            numbers.append(nums[i][len(nums) - i - 1])
        numbers = sorted(numbers)
        while numbers:
            n = numbers.pop()
            if n == 2:
                return 2
            if n == 1:
                return 0
            flag = True
            if n % 2 == 0:
                continue
            for i in range(2, n // 2):
                if n % i == 0:
                    flag = False
                    break
            if flag:
                return n
        
        return 0


End of Day 112
