#First Problem (180)
SELECT DISTINCT num AS ConsecutiveNums
FROM (
    SELECT num, 
           LAG(num) OVER (ORDER BY id) AS prev_num, 
           LEAD(num) OVER (ORDER BY id) AS next_num
    FROM Logs
) AS ConsecutiveCheck
WHERE num = prev_num AND num = next_num;



#Second Problem (184)
SELECT d.name AS Department, e.name AS Employee, e.salary AS Salary
FROM Employee e
JOIN Department d ON e.departmentId = d.id
WHERE e.salary = (
    SELECT MAX(salary)
    FROM Employee
    WHERE departmentId = e.departmentId
);



#Third Problem (187)
class Solution(object):
    def findRepeatedDnaSequences(self, s):
        seen = set()
        repeated = set()

        for i in range(len(s) - 9):  
            sequence = s[i:i+10]

            if sequence in seen:
                repeated.add(sequence)
            else:
                seen.add(sequence)
        
        return list(repeated)



#Fourth Problem (189)
class Solution(object):
    def rotate(self, nums, k):
        n = len(nums)
        k = k % n 

        def reverse(nums, start, end):
            while start < end:
                nums[start], nums[end] = nums[end], nums[start]
                start += 1
                end -= 1

        reverse(nums, 0, n - 1)
        
        reverse(nums, 0, k - 1)
        
        reverse(nums, k, n - 1)




