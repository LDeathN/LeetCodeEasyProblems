#First Problem
class Solution(object):
    def findErrorNums(self, nums):
        n = len(nums)
        S = n * (n + 1) // 2
        P = n * (n + 1) * (2 * n + 1) // 6
        
        S_prime = sum(nums)
        P_prime = sum(x * x for x in nums)
        
        diff = S - S_prime  
        sq_diff = P - P_prime 

        sum_diff = sq_diff // diff
        
        miss = (diff + sum_diff) // 2
        dup = sum_diff - miss
        
        return [dup, miss]



#Second Problem
class Solution(object):
    def inorder_traversal(self, root):
        elements = []
        
        def inorder(node):
            if not node:
                return
            inorder(node.left)
            elements.append(node.val)
            inorder(node.right)
        
        inorder(root)
        return elements

    def findTarget(self, root, k):
        elements = self.inorder_traversal(root)
        
        left, right = 0, len(elements) - 1
        
        while left < right:
            current_sum = elements[left] + elements[right]
            if current_sum == k:
                return True
            elif current_sum < k:
                left += 1
            else:
                right -= 1
        
        return False



#Third Problem
class Solution(object):
    def judgeCircle(self, moves):
        x = 0
        y = 0
        for letter in moves:
            if letter == "U":
                y += 1
            elif letter == "D":
                y -= 1
            elif letter == "L":
                x -= 1
            elif letter == "R":
                x += 1
        
        if x == 0 and y == 0:
            return True
        return False



#Fourth Problem
class Solution(object):
    def imageSmoother(self, img):
        m, n = len(img), len(img[0])
        result = [[0] * n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                total, count = 0, 0
                for x in range(max(0, i-1), min(i+2, m)):
                    for y in range(max(0, j-1), min(j+2, n)):
                        total += img[x][y]
                        count += 1
                result[i][j] = total // count
        
        return result




