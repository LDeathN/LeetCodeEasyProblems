#First Problem
class Solution(object):
    def findCenter(self, edges):
        nums = {}
        for edge in edges:
            for num in edge:
                if num not in nums:
                    nums[num] = 0
                nums[num] += 1
        
        nums = sorted(nums.items(), key=lambda item: item[1], reverse=True)
        return nums[0][0]



#Second Problem
SELECT product_id, 'store1' AS store, store1 AS price
FROM Products
WHERE store1 IS NOT NULL

UNION ALL

SELECT product_id, 'store2' AS store, store2 AS price
FROM Products
WHERE store2 IS NOT NULL

UNION ALL

SELECT product_id, 'store3' AS store, store3 AS price
FROM Products
WHERE store3 IS NOT NULL;



#Third Problem
class Solution(object):
    def secondHighest(self, s):
        digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
        found = set()
        for i in s:
            if i in digits:
                found.add(int(i))
        found = sorted(found)
        if len(found) <= 1:
            return -1
        return found[-2]



#Fourth Problem
class Solution(object):
    def maxAscendingSum(self, nums):
        current = 0
        sums = []
        for i in range(len(nums)):
            if i == 0:
                current += nums[i]
            elif nums[i-1] < nums[i]:
                current += nums[i]
            else:
                sums.append(current)
                current = nums[i]

            if i == len(nums) - 1:
                sums.append(current)
                
        return max(sums)




