#First Problem (162)
class Solution(object):
    def findPeakElement(self, nums):
        left, right = 0, len(nums) - 1
    
        while left < right:
            mid = (left + right) // 2
            if nums[mid] > nums[mid + 1]:
                right = mid
            else:
                left = mid + 1
    
        return left



#Second Problem (164)
class Solution(object):
    def maximumGap(self, nums):
        if len(nums) < 2:
            return 0
        
        min_val, max_val = min(nums), max(nums)

        if min_val == max_val:
            return 0
        
        n = len(nums)
        bucket_size = max(1, (max_val - min_val) // (n - 1)) 
        bucket_count = (max_val - min_val) // bucket_size + 1  

        bucket_min = [float('inf')] * bucket_count
        bucket_max = [float('-inf')] * bucket_count

        for num in nums:
            bucket_idx = (num - min_val) // bucket_size
            bucket_min[bucket_idx] = min(bucket_min[bucket_idx], num)
            bucket_max[bucket_idx] = max(bucket_max[bucket_idx], num)

        max_gap = 0
        prev_max = min_val  

        for i in range(bucket_count):
            if bucket_min[i] == float('inf'):
                continue
            max_gap = max(max_gap, bucket_min[i] - prev_max)
            prev_max = bucket_max[i]

        return max_gap



#Third Problem (165)
class Solution(object):
    def compareVersion(self, version1, version2):
        v1_parts = version1.split('.')
        v2_parts = version2.split('.')
        
        max_length = max(len(v1_parts), len(v2_parts))

        for i in range(max_length):
            v1_part = int(v1_parts[i]) if i < len(v1_parts) else 0
            v2_part = int(v2_parts[i]) if i < len(v2_parts) else 0
            
            if v1_part > v2_part:
                return 1
            elif v1_part < v2_part:
                return -1

        return 0



#Fourth Problem (166)
class Solution(object):
    def fractionToDecimal(self, numerator, denominator):
        if numerator == 0:
            return "0"
        result = []

        if (numerator < 0) != (denominator < 0):
            result.append("-")

        numerator, denominator = abs(numerator), abs(denominator)

        integer_part = numerator // denominator
        result.append(str(integer_part))
        
        remainder = numerator % denominator
        if remainder == 0:
            return ''.join(result) 

        result.append(".")
        remainder_map = {}

        while remainder != 0:
            if remainder in remainder_map:
                result.insert(remainder_map[remainder], "(")
                result.append(")")
                break

            remainder_map[remainder] = len(result)

            remainder *= 10
            result.append(str(remainder // denominator))
            remainder %= denominator
        
        return ''.join(result)




