#First Problem (162)
class Solution(object):
    def findPeakElement(self, nums):
        left, right = 0, len(nums) - 1
    
        while left < right:
            mid = (left + right) // 2
            if nums[mid] > nums[mid + 1]:
                right = mid
            else:
                left = mid + 1
    
        return left



#Second Problem (164)
class Solution(object):
    def maximumGap(self, nums):
        if len(nums) < 2:
            return 0
        
        min_val, max_val = min(nums), max(nums)

        if min_val == max_val:
            return 0
        
        n = len(nums)
        bucket_size = max(1, (max_val - min_val) // (n - 1)) 
        bucket_count = (max_val - min_val) // bucket_size + 1  

        bucket_min = [float('inf')] * bucket_count
        bucket_max = [float('-inf')] * bucket_count

        for num in nums:
            bucket_idx = (num - min_val) // bucket_size
            bucket_min[bucket_idx] = min(bucket_min[bucket_idx], num)
            bucket_max[bucket_idx] = max(bucket_max[bucket_idx], num)

        max_gap = 0
        prev_max = min_val  

        for i in range(bucket_count):
            if bucket_min[i] == float('inf'):
                continue
            max_gap = max(max_gap, bucket_min[i] - prev_max)
            prev_max = bucket_max[i]

        return max_gap




