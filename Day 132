#First Problem (3083)
class Solution(object):
    def isSubstringPresent(self, s):
        reversed_s = s[::-1]

        for i in range(len(s) - 1):
            substring = s[i:i+2]
            if substring in reversed_s:
                return True
        
        return False



#Second Problem (3090)
class Solution(object):
    def maximumLengthSubstring(self, s):
        left = 0
        char_count = {}
        max_length = 0  

        for right in range(len(s)):
            char_count[s[right]] = char_count.get(s[right], 0) + 1

            while char_count[s[right]] > 2:
                char_count[s[left]] -= 1
                if char_count[s[left]] == 0:
                    del char_count[s[left]] 
                left += 1  

            current_length = right - left + 1
            max_length = max(max_length, current_length)

        return max_length



#Third Problem (3095)
class Solution(object):
    def minimumSubarrayLength(self, nums, k):
        n = len(nums)
        min_length = float('inf') 

        for left in range(n):
            current_or = 0 

            for right in range(left, n):
                current_or |= nums[right]  
                
                if current_or >= k:
                    min_length = min(min_length, right - left + 1)
                    break 
        return min_length if min_length != float('inf') else -1



#Fourth Problem (3099)
class Solution(object):
    def sumOfTheDigitsOfHarshadNumber(self, x):
        digit_sum = sum(int(digit) for digit in str(x))

        if x % digit_sum == 0:
            return digit_sum 
        else:
            return -1



#Fifth Problem (3105)
class Solution(object):
    def longestMonotonicSubarray(self, nums):
        incr = decr = 1
        max_length = 1

        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                incr += 1  
                decr = 1 
            elif nums[i] < nums[i - 1]:
                decr += 1 
                incr = 1  
            else:
                incr = decr = 1

            max_length = max(max_length, incr, decr)
        
        return max_length


End of Day 132
