#First Problem
class Solution(object):
    def uniqueMorseRepresentations(self, words):
        unique = []
        morse_code = {
            "a": ".-",
            "b": "-...",
            "c": "-.-.",
            "d": "-..",
            "e": ".",
            "f": "..-.",
            "g": "--.",
            "h": "....",
            "i": "..",
            "j": ".---",
            "k": '-.-',
            "l": ".-..",
            "m": "--",
            "n": "-.",
            "o": "---",
            "p": ".--.",
            "q": "--.-",
            "r": ".-.",
            "s": "...",
            "t": "-",
            "u": "..-",
            "v": "...-",
            "w": ".--",
            "x": "-..-",
            "y": "-.--",
            "z": "--..",
            }

        for word in words:
            current =  ""
            for letter in word:
                current += morse_code[letter]
            if current not in unique:
                unique.append(current)
                
        unique = set(unique)

        return len(unique)



#Second Problem
class Solution(object):
    def numberOfLines(self, widths, s):
        lines = 1 
        current_width = 0
        
        for char in s:
            width = widths[ord(char) - ord('a')]
            if current_width + width > 100:
                lines += 1
                current_width = width
            else:
                current_width += width
        
        return [lines, current_width]



#Third Problem
class Solution(object):
    from itertools import combinations

    def largestTriangleArea(self, points):
        def area(p1, p2, p3):
            x1, y1 = p1
            x2, y2 = p2
            x3, y3 = p3
            return abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0
        
        max_area = 0
        for p1, p2, p3 in combinations(points, 3):
            max_area = max(max_area, area(p1, p2, p3))
        
        return max_area



#Fourth Problem
class Solution(object):
    import collections
    import re
    def mostCommonWord(self, paragraph, banned):
        normalized_str = re.sub(r'[^\w\s]', ' ', paragraph).lower()

        words = normalized_str.split()

        word_count = collections.Counter(words)

        banned_set = set(banned)
        for word in banned_set:
            if word in word_count:
                del word_count[word]

        most_common_word, _ = word_count.most_common(1)[0]
        
        return most_common_word



#Fifth Problem
class Solution(object):
    def shortestToChar(self, s, c):
        n = len(s)
        answer = [float('inf')] * n

        last_pos = -float('inf')
        for i in range(n):
            if s[i] == c:
                last_pos = i
            answer[i] = abs(i - last_pos)

        last_pos = float('inf')
        for i in range(n-1, -1, -1):
            if s[i] == c:
                last_pos = i
            answer[i] = min(answer[i], abs(i - last_pos))

        return answer




