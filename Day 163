#First Problem (236)
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        if not root or root == p or root == q:
            return root

        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        
        if left and right:
            return root

        return left if left else right



#Second Problem (237)
class Solution(object):
    def deleteNode(self, node):
        node.val = node.next.val
        node.next = node.next.next



#Third Problem (238)
class Solution(object):
    def productExceptSelf(self, nums):
        n = len(nums)

        answer = [1] * n
        
        prefix = 1
        for i in range(n):
            answer[i] = prefix
            prefix *= nums[i] 
        
        suffix = 1
        for i in range(n-1, -1, -1):
            answer[i] *= suffix
            suffix *= nums[i] 
        
        return answer



#Fourth Problem (240)
class Solution(object):
    def searchMatrix(self, matrix, target):
        if not matrix or not matrix[0]:
            return False
        
        rows, cols = len(matrix), len(matrix[0])
        row, col = 0, cols - 1

        while row < rows and col >= 0:
            if matrix[row][col] == target:
                return True
            elif matrix[row][col] > target:
                col -= 1 
            else:
                row += 1 

        return False



#Fifth Problem (241)
class Solution(object):
    def diffWaysToCompute(self, expression):
        memo = {}

        def ways(expr):
            if expr in memo:
                return memo[expr]
            
            results = []
            for i in range(len(expr)):
                char = expr[i]
                
                if char in '+-*':
                    left_results = ways(expr[:i])
                    right_results = ways(expr[i+1:])

                    for left in left_results:
                        for right in right_results:
                            if char == '+':
                                results.append(left + right)
                            elif char == '-':
                                results.append(left - right)
                            elif char == '*':
                                results.append(left * right)

            if not results:
                results.append(int(expr))

            memo[expr] = results
            return results

        return ways(expression)


End of Day 163
