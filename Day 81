#First Problem
class Solution(object):
    def sumBase(self, n, k):
        digits = []
        while n > 0:
            digits.append(n % k)
            n //= k

        return sum(digits)



#Second Problem
class Solution(object):
    def replaceDigits(self, s):
        for i in range(len(s)):
            if s[i].isdigit():
                s = s.replace(s[i], chr(ord(s[i - 1]) + int(s[i])), 1)
        
        return s



#Third Problem
class Solution(object):
    def getMinDistance(self, nums, target, start):
        values = []
        for i in range(len(nums)):
            if nums[i] == target:
                values.append(abs(i - start))
        
        return min(values)



#Fourth Problem
class Solution(object):
    def maximumPopulation(self, logs):
        population_changes = {}

        for birth, death in logs:
            if birth in population_changes:
                population_changes[birth] += 1
            else:
                population_changes[birth] = 1
            
            if death in population_changes:
                population_changes[death] -= 1
            else:
                population_changes[death] = -1

        start_year = min([birth for birth, death in logs])
        end_year = max([death for birth, death in logs])

        current_population = 0
        max_population = 0
        max_year = start_year

        for year in range(start_year, end_year):
            if year in population_changes:
                current_population += population_changes[year]
            
            if current_population > max_population:
                max_population = current_population
                max_year = year
        
        return max_year



#Fifth Problem
class Solution(object):
    def sortSentence(self, s):
        words = s.split()

        words.sort(key=lambda word: int(word[-1]))

        original_sentence = ' '.join(word[:-1] for word in words)
        
        return original_sentence


End of Day 81
