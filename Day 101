#First Problem
class Solution(object):
    def decodeMessage(self, key, message):
        seen = set()
        substitution_order = []
        
        for char in key:
            if char != ' ' and char not in seen:
                seen.add(char)
                substitution_order.append(char)

        substitution_table = {}
        alphabet = 'abcdefghijklmnopqrstuvwxyz'
        
        for i, char in enumerate(substitution_order):
            substitution_table[char] = alphabet[i]

        decoded_message = []
        
        for char in message:
            if char == ' ':
                decoded_message.append(char)
            else:
                decoded_message.append(substitution_table[char])
        
        return ''.join(decoded_message)



#Second Problem
class Solution(object):
    def evaluateTree(self, root):
        if not root.left and not root.right:
            return root.val == 1

        left_value = self.evaluateTree(root.left)
        right_value = self.evaluateTree(root.right)
        
        if root.val == 2:
            return left_value or right_value
        elif root.val == 3:
            return left_value and right_value



#Third Problem
class Solution(object):
    def fillCups(self, amount):
        amount.sort()
        total_cups = sum(amount)

        return max((total_cups + 1) // 2, amount[2])




