#First Problem
class Solution(object):
    def maxDepth(self, root):
        if not root:
            return 0
        
        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))


#Second Problem
class Solution(object):
    def constructor(self, nums, left, right):
        if left > right:
            return None
        midpoint = left + (right - left) // 2
        node = TreeNode(nums[midpoint])
        node.left = self.constructor(nums, left, midpoint - 1)
        node.right = self.constructor(nums, midpoint + 1, right)
        return node

    def sortedArrayToBST(self, nums):
        if not nums:
            return None
        return self.constructor(nums, 0, len(nums) - 1)


#Third Problem
class Solution(object):
    def isBalanced(self, root):
        
        def dfs(root):
            if not root: return [True, 0]

            left, right = dfs(root.left), dfs(root.right)
            balanced = left[0] and right[0] and abs(left[1] - right[1]) <= 1
            
            return [balanced, 1 + max(left[1], right[1])]
        
        return dfs(root)[0]


#Fourth Problem
class Solution(object):
    def minDepth(self, root):
        if not root:
            return 0
        
        self.min_depth = float('inf')
        self.dfs(root, 0)

        return self.min_depth

    def dfs(self, node, cur_depth):
        if not node: return None

        if not node.left and not node.right:
            self.min_depth = min(self.min_depth, cur_depth + 1)

        self.dfs(node.left, cur_depth + 1)
        self.dfs(node.right, cur_depth + 1)


