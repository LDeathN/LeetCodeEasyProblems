#First Problem
class Solution(object):
    def wordPattern(self, pattern, s):
        char_to_word = {}
        word_to_char = {}
        s = s.split(" ")
        
        if len(pattern) != len(s):
            return False

        for i, j in zip(pattern, s):
            if i in char_to_word and char_to_word[i] != j:
                return False
            if j in word_to_char and word_to_char[j] != i:
                return False
            char_to_word[i] = j
            word_to_char[j] = i
        return True



#Second Problem
class Solution(object):
    def canWinNim(self, n):
        return n % 4 != 0



#Third Problem
class NumArray(object):

    def __init__(self, nums):
        self.prefix = []
        cur = 0
        for n in nums:
            cur += n
            self.prefix.append(cur)
        

    def sumRange(self, left, right):
        right_sum = self.prefix[right]
        left_sum = self.prefix[left - 1] if left > 0 else 0
        return right_sum - left_sum



#Fourth Problem
class Solution(object):
    def countBits(self, n):
        dp = [0] * (n + 1)
        offset = 1

        for i in range(1, n + 1):
            if offset * 2 == i:
                offset = i
            dp[i] = 1 + dp[i - offset]
        
        return dp



#Fifth Problem
class Solution(object):
    def isPowerOfThree(self, n):
        if n < 1:
            return False
        for i in range(0, 31):
            if 3 ** i == n:
                return True
        return False



End of Day 17
