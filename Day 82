#First Problem
class Solution(object):
    def subsetXORSum(self, nums):
        def all_subset_xors(nums):
            n = len(nums)
            total_sum = 0
            for subset in range(1 << n):
                current_xor = 0
                for i in range(n):
                    if subset & (1 << i):
                        current_xor ^= nums[i]
                total_sum += current_xor
            return total_sum

        return all_subset_xors(nums)



#Second Problem
class Solution(object):
    def checkZeroOnes(self, s):
        count_1 = 0
        count_0 = 0
        max_1 = 0
        max_0 = 0
        for i in range(len(s)):
            if s[i] == "1":
                if count_0 > max_0:
                    max_0 = count_0
                count_1 += 1
                count_0 = 0
            else:
                if count_1 > max_1:
                    max_1 = count_1
                count_0 += 1
                count_1 = 0

            if i == len(s) - 1:
                if s[i] == "1":
                    if count_1 > max_1:
                        max_1 = count_1
                else:
                    if count_0 > max_0:
                        max_0 = count_0
        
        return max_1 > max_0



#Third Problem
SELECT 
    employee_id, 
    CASE 
        WHEN employee_id % 2 = 1 AND name NOT LIKE 'M%' THEN salary 
        ELSE 0 
    END AS bonus
FROM 
    Employees
ORDER BY 
    employee_id; 



#Fourth Problem
class Solution(object):
    def countGoodSubstrings(self, s):
        result = 0
        for i in range(len(s) - 2):
            current = []
            check = True
            for char in s[i:i+3]:
                if char not in current:
                    current.append(char)
                else:
                    check = False
                    break

            if check:
                result += 1

        return result




