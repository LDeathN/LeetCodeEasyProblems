#First Problem (3238)
class Solution(object):
    def winningPlayerCount(self, n, pick):
        player_picks = [{} for _ in range(n)]

        for player, color in pick:
            if color in player_picks[player]:
                player_picks[player][color] += 1
            else:
                player_picks[player][color] = 1

        winners_count = 0
        for i in range(n):
            if any(count > i for count in player_picks[i].values()):
                winners_count += 1

        return winners_count



#Second Problem (3242)
class NeighborSum(object):

    def __init__(self, grid):
        self.grid = grid
        self.n = len(grid)
        self.position_map = {}
        for i in range(self.n):
            for j in range(self.n):
                self.position_map[grid[i][j]] = (i, j)
        

    def adjacentSum(self, value):
        if value not in self.position_map:
            return 0
        
        i, j = self.position_map[value]
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  
        total_sum = 0
        
        for di, dj in directions:
            ni, nj = i + di, j + dj
            if 0 <= ni < self.n and 0 <= nj < self.n:  
                total_sum += self.grid[ni][nj]
        
        return total_sum
        

    def diagonalSum(self, value):
        if value not in self.position_map:
            return 0
        
        i, j = self.position_map[value]
        directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)] 
        total_sum = 0
        
        for di, dj in directions:
            ni, nj = i + di, j + dj
            if 0 <= ni < self.n and 0 <= nj < self.n: 
                total_sum += self.grid[ni][nj]
        
        return total_sum



#Third Problem (3248)
class Solution(object):
    def finalPositionOfSnake(self, n, commands):
        x, y = 0, 0

        for command in commands:
            if command == "UP":
                x -= 1 
            elif command == "DOWN":
                x += 1  
            elif command == "LEFT":
                y -= 1  
            elif command == "RIGHT":
                y += 1 

        return (x * n) + y




