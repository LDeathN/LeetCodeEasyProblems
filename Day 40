#First Problem
class Solution(object):
    def lemonadeChange(self, bills):
        five_count = 0
        ten_count = 0
        
        for bill in bills:
            if bill == 5:
                five_count += 1
            elif bill == 10:
                if five_count == 0:
                    return False
                five_count -= 1
                ten_count += 1
            elif bill == 20:
                if ten_count > 0 and five_count > 0:
                    ten_count -= 1
                    five_count -= 1
                elif five_count >= 3:
                    five_count -= 3
                else:
                    return False
        
        return True



#Second Problem
class Solution(object):
    def transpose(self, matrix):
        transposed = [[0 for j in range(len(matrix))] for i in range(len(matrix[0]))]
        
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                transposed[j][i] = matrix[i][j]

        return transposed



#Third Problem
class Solution(object):
    def binaryGap(self, n):
        binary_rep = bin(n)[2:]

        positions = []

        for i, bit in enumerate(binary_rep):
            if bit == '1':
                positions.append(i)

        if len(positions) < 2:
            return 0

        max_distance = 0
        for i in range(1, len(positions)):
            max_distance = max(max_distance, positions[i] - positions[i - 1])
        
        return max_distance




