#First Problem (2399)
class Solution(object):
    def checkDistances(self, s, distance):
        first_occurrence = [-1] * 26

        for i, char in enumerate(s):
            char_index = ord(char) - ord('a')
            
            if first_occurrence[char_index] == -1:
                first_occurrence[char_index] = i
            else:
                expected_distance = distance[char_index]
                actual_distance = i - first_occurrence[char_index] - 1
                
                if actual_distance != expected_distance:
                    return False

        return True



#Second Problem (2404)
class Solution(object):
    def mostFrequentEven(self, nums):
        from collections import Counter

        even_nums = [num for num in nums if num % 2 == 0]

        if not even_nums:
            return -1

        freq_counter = Counter(even_nums)

        max_frequency = -1
        most_frequent_even = float('inf')

        for num, freq in freq_counter.items():
            if freq > max_frequency or (freq == max_frequency and num < most_frequent_even):
                max_frequency = freq
                most_frequent_even = num
        
        return most_frequent_even



#Third Problem (2409)
class Solution(object):
    def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):
        days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

        def date_to_day_of_year(date):
            month, day = map(int, date.split('-'))
            return sum(days_in_month[:month-1]) + day

        arriveAliceDay = date_to_day_of_year(arriveAlice)
        leaveAliceDay = date_to_day_of_year(leaveAlice)
        arriveBobDay = date_to_day_of_year(arriveBob)
        leaveBobDay = date_to_day_of_year(leaveBob)

        start_overlap = max(arriveAliceDay, arriveBobDay)
        end_overlap = min(leaveAliceDay, leaveBobDay)

        if start_overlap > end_overlap:
            return 0
        return end_overlap - start_overlap + 1



#Fourth Problem (2413)
class Solution(object):
    def smallestEvenMultiple(self, n):
        if n % 2 == 0:
            return n
        else:
            return 2 * n



#Fifth Problem (2418)
class Solution(object):
    def sortPeople(self, names, heights):
        result = []
        while names or heights:
            height = heights.index(max(heights))
            heights.pop(height)
            result.append(names.pop(height))
        
        return result


End of Day 104
