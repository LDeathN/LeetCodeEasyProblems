#First Problem
class Solution(object):
    def minCostToMoveChips(self, position):
        even_count = sum(1 for pos in position if pos % 2 == 0)
        odd_count = len(position) - even_count
        return min(even_count, odd_count)



#Second Problem
class Solution(object):
    def balancedStringSplit(self, s):
        count_L = 0
        count_R = 0
        count_balanced = 0
        
        for char in s:
            if char == 'L':
                count_L += 1
            elif char == 'R':
                count_R += 1
            
            if count_L == count_R:
                count_balanced += 1
        
        return count_balanced



#Third Problem
class Solution(object):
    def checkStraightLine(self, coordinates):
        if len(coordinates) < 3:
            return True

        def cross_product(A, B, C):
            AB = [B[0] - A[0], B[1] - A[1]]
            AC = [C[0] - A[0], C[1] - A[1]]
            return AB[0] * AC[1] - AB[1] * AC[0]
        
        for i in range(2, len(coordinates)):
            if cross_product(coordinates[0], coordinates[1], coordinates[i]) != 0:
                return False
        
        return True



#Fourth Problem
SELECT
    p.product_id,
    COALESCE(ROUND(SUM(u.units * p.price) / NULLIF(SUM(u.units), 0), 2), 0.00) AS average_price
FROM
    Prices p
LEFT JOIN 
    UnitsSold u ON p.product_id = u.product_id
    AND u.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY
    p.product_id;



#Fifth Problem
class Solution(object):
    def oddCells(self, m, n, indices):
        matrix = [[0 for i in range(n)] for i in range(m)]
        result = 0

        for indice in indices:
            x, y = indice[0], indice[1]
            for i in range(n):
                matrix[x][i] += 1
            for j in range(m):
                matrix[j][y] += 1
            
        for i in range(m):
            for j in range(n):
                if matrix[i][j] % 2 != 0:
                    result += 1
        
        return result



End of Day 54
