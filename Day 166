#First Problem (304)
class NumMatrix(object):

    def __init__(self, matrix):
        if not matrix or not matrix[0]:
            return
        
        m, n = len(matrix), len(matrix[0])
        self.prefixSum = [[0] * (n + 1) for _ in range(m + 1)]

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                self.prefixSum[i][j] = (matrix[i - 1][j - 1] +
                                        self.prefixSum[i - 1][j] +
                                        self.prefixSum[i][j - 1] -
                                        self.prefixSum[i - 1][j - 1])
        

    def sumRegion(self, row1, col1, row2, col2):
        return (self.prefixSum[row2 + 1][col2 + 1] -
                self.prefixSum[row1][col2 + 1] -
                self.prefixSum[row2 + 1][col1] +
                self.prefixSum[row1][col1])



#Second Problem (306)
class Solution(object):
    def isAdditiveNumber(self, num):
        def is_valid_sequence(first, second, start):
            while start < len(num):
                sum_str = str(first + second)
                if not num.startswith(sum_str, start):
                    return False
                start += len(sum_str)
                first, second = second, int(sum_str)
            return True
        
        n = len(num)
        for i in range(1, n):
            for j in range(i + 1, n):
                first, second = num[:i], num[i:j]
                if (len(first) > 1 and first[0] == '0') or (len(second) > 1 and second[0] == '0'):
                    continue
                first_num, second_num = int(first), int(second)
                if is_valid_sequence(first_num, second_num, j):
                    return True
        return False



#Third Problem (307)
class NumArray(object):

    def __init__(self, nums):
        self.n = len(nums)
        self.tree = [0] * (2 * self.n) 

        for i in range(self.n):
            self.tree[self.n + i] = nums[i]
        
        for i in range(self.n - 1, 0, -1):
            self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1]
        

    def update(self, index, val):
        index += self.n  
        self.tree[index] = val

        i = index
        while i > 1:
            self.tree[i // 2] = self.tree[i] + self.tree[i ^ 1]
            i //= 2
        

    def sumRange(self, left, right):
        left += self.n  
        right += self.n  
        sum_ = 0

        while left <= right:
            if left % 2 == 1:  
                sum_ += self.tree[left]
                left += 1
            if right % 2 == 0:  
                sum_ += self.tree[right]
                right -= 1
            left //= 2
            right //= 2

        return sum_




