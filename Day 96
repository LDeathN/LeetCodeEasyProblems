#First Problem
class Solution(object):
    def divideArray(self, nums):
        from collections import Counter

        freq = Counter(nums)

        for count in freq.values():
            if count % 2 != 0:
                return False
        
        return True



#Second Problem
n = len(nums)
    if n < 3:
        return 0

    hills_and_valleys = 0

    for i in range(1, n-1):
        if nums[i] == nums[i-1]:
            continue

        left = i - 1
        right = i + 1

        while left >= 0 and nums[left] == nums[i]:
            left -= 1
        while right < n and nums[right] == nums[i]:
            right += 1

        if left >= 0 and right < n:
            if nums[i] > nums[left] and nums[i] > nums[right]:
                hills_and_valleys += 1
            elif nums[i] < nums[left] and nums[i] < nums[right]:
                hills_and_valleys += 1

    return hills_and_valleys



#Third Problem
class Solution(object):
    def findDifference(self, nums1, nums2):
        result = []
        part_one = set()
        part_two = set()
        for i in range(len(nums1)):
            if nums1[i] not in nums2:
                part_one.add(nums1[i])
        for i in range(len(nums2)):
            if nums2[i] not in nums1:
                part_two.add(nums2[i])
        
        result.append(part_one)
        result.append(part_two)
        return result



#Fourth Problem
class Solution(object):
    def minBitFlips(self, start, goal):
        xor_result = start ^ goal

        count_flips = 0
        while xor_result > 0:
            count_flips += xor_result & 1
            xor_result >>= 1
        
        return count_flips



#Fifth Problem
class Solution(object):
    def convertTime(self, current, correct):
        count = 0
        current = current.split(':')
        correct = correct.split(':')
        current_time = int(current[0]) * 60 + int(current[1])
        correct_time = int(correct[0]) * 60 + int(correct[1])

        while current_time != correct_time:
            diff = correct_time - current_time 
            if diff >= 60:
                current_time += 60
            elif diff >= 15:
                current_time += 15
            elif diff >= 5:
                current_time += 5
            else:
                current_time += 1
            count += 1
        
        return count


End of Day 96
