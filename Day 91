#First Problem
class Solution(object):
    def maxDistance(self, colors):
        n = len(colors)
        max_distance = 0

        for i in range(n):
            if colors[i] != colors[n - 1]:
                max_distance = max(max_distance, n - 1 - i)

        for i in range(n - 1, -1, -1):
            if colors[i] != colors[0]:
                max_distance = max(max_distance, i)
        
        return max_distance



#Second Problem
class Solution(object):
    def countWords(self, words1, words2):
        count = 0
        for word1 in words1:
            if words1.count(word1) == 1 and word1 in words2:
                if words2.count(word1) == 1:
                    count += 1
               
        return count



#Third Problem
class Solution(object):
    def targetIndices(self, nums, target):
        nums = sorted(nums)
        result = []
        for i in range(len(nums)):
            if nums[i] == target:
                result.append(i)
        return result



#Fourth Problem
class Solution(object):
    def findEvenNumbers(self, digits):
        unique_numbers = set()

        n = len(digits)
        for i in range(n):
            for j in range(n):
                for k in range(n):
                    if i != j and j != k and i != k:
                        num = digits[i] * 100 + digits[j] * 10 + digits[k]
                        if digits[i] != 0 and num % 2 == 0:
                            unique_numbers.add(num)

        return sorted(unique_numbers)



#Fifth Problem
class Solution(object):
    def maxSubsequence(self, nums, k):
        from heapq import nlargest
        from collections import Counter

        largest_k = nlargest(k, nums)

        largest_count = Counter(largest_k)

        result = []
        for num in nums:
            if largest_count[num] > 0:
                result.append(num)
                largest_count[num] -= 1
                if len(result) == k:
                    break
        
        return result


End of Day 91
